using DataAccess.Domain;
using DataAccess.Domain.Models;
using DataAccess.Infrastructure.Persistence.DXConfigurations;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Net.Http.Headers;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Unit = DataAccess.Domain.Models.Unit;

namespace DataAccess.Infrastructure.Persistence;

public class DxdbContext : DbContext, IDbContext
{
    private readonly IConfiguration _configuration;
    private readonly IHttpContextAccessor _httpContextAccessor;
    private readonly IPublisher _publisher;
    private readonly ILogger<DxdbContext> _logger;
    private IDbContextTransaction? _currentTransaction;

    public DxdbContext(
        DbContextOptions<DxdbContext> options,
        IConfiguration configuration,
        IHttpContextAccessor httpContextAccessor,
        IPublisher publisher,
        ILogger<DxdbContext> logger) : base(options)
    {
        _configuration = configuration;
        _httpContextAccessor = httpContextAccessor;
        _publisher = publisher;
        _logger = logger;
    }

    public DxdbContext(
        IConfiguration configuration,
        IHttpContextAccessor httpContextAccessor,
        IPublisher publisher,
        ILogger<DxdbContext> logger)
    {
        _configuration = configuration;
        _httpContextAccessor = httpContextAccessor;
        _publisher = publisher;
        _logger = logger;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        var dbSecrets = _configuration.GetSection("DBSecrets").GetChildren()
            .ToDictionary(k => k.Key, v => v.Value);

        var principal = ExtractJwtPayload();
        if (principal == null)
            throw new UnauthorizedAccessException("Please send JWT token in the request");

        var ip = principal.FindFirstValue("ip");
        var database = principal.FindFirstValue("database");

        if (!optionsBuilder.IsConfigured)
        {
            var connectionString = ConnStringBuilder(ip, database,
                dbSecrets.GetValueOrDefault("Username"),
                dbSecrets.GetValueOrDefault("Password"));

            optionsBuilder.UseSqlServer(connectionString);
        }

        base.OnConfiguring(optionsBuilder);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Arabic_CI_AS");

        modelBuilder.ApplyConfiguration(new AccPayrollItemConfiguration());
        modelBuilder.ApplyConfiguration(new AccountConfiguration());
        modelBuilder.ApplyConfiguration(new AccountMonthlyConfiguration());
        modelBuilder.ApplyConfiguration(new AccountOperandConfiguration());
        modelBuilder.ApplyConfiguration(new AccountTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new AccountTransactionEntryConfiguration());
        modelBuilder.ApplyConfiguration(new AccountTypeConfiguration());
        modelBuilder.ApplyConfiguration(new AccountWorkLinkConfiguration());
        modelBuilder.ApplyConfiguration(new AccountmainConfiguration());
        modelBuilder.ApplyConfiguration(new AddressCostConfiguration());
        modelBuilder.ApplyConfiguration(new AlarmConfiguration());
        modelBuilder.ApplyConfiguration(new AlarmEndUserConfiguration());
        modelBuilder.ApplyConfiguration(new AlarmListConfiguration());
        modelBuilder.ApplyConfiguration(new AlarmsPostponedConfiguration());
        modelBuilder.ApplyConfiguration(new AppointmentConfiguration());
        modelBuilder.ApplyConfiguration(new ArchiveConfiguration());
        modelBuilder.ApplyConfiguration(new ArchiveRelConfiguration());
        modelBuilder.ApplyConfiguration(new AreaConfiguration());
        modelBuilder.ApplyConfiguration(new AreaLinkConfiguration());
        modelBuilder.ApplyConfiguration(new AssetConfiguration());
        modelBuilder.ApplyConfiguration(new AssetDestroyConfiguration());
        modelBuilder.ApplyConfiguration(new AssetImproveConfiguration());
        modelBuilder.ApplyConfiguration(new AssetInRentConfiguration());
        modelBuilder.ApplyConfiguration(new AssetPriceConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRecalcConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentAppointmentConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentLongConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentLongInstallConfiguration());
        modelBuilder.ApplyConfiguration(new AssetRentResourceConfiguration());
        modelBuilder.ApplyConfiguration(new AssetReserveConfiguration());
        modelBuilder.ApplyConfiguration(new AssetSaleConfiguration());
        modelBuilder.ApplyConfiguration(new AssetSpentConfiguration());
        modelBuilder.ApplyConfiguration(new AssetSpentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new AttendanceLogConfiguration());
        modelBuilder.ApplyConfiguration(new AttentionConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetItemConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetItemsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetMasterConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetMasterEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetValueConfiguration());
        modelBuilder.ApplyConfiguration(new BadgetValueEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BalanceConfiguration());
        modelBuilder.ApplyConfiguration(new BankConfiguration());
        modelBuilder.ApplyConfiguration(new BankDealingConfiguration());
        modelBuilder.ApplyConfiguration(new BarcodeItemConfiguration());
        modelBuilder.ApplyConfiguration(new BarcodeQrConfiguration());
        modelBuilder.ApplyConfiguration(new BarcodeScaleConfiguration());
        modelBuilder.ApplyConfiguration(new BatchNumberConfiguration());
        modelBuilder.ApplyConfiguration(new BatchNumberDeactivateConfiguration());
        modelBuilder.ApplyConfiguration(new BatchNumberTransferResultConfiguration());
        modelBuilder.ApplyConfiguration(new BatchNumberTransferTempConfiguration());
        modelBuilder.ApplyConfiguration(new BillApprovalConfiguration());
        modelBuilder.ApplyConfiguration(new BillClassConfiguration());
        modelBuilder.ApplyConfiguration(new BillCustDiscountConfiguration());
        modelBuilder.ApplyConfiguration(new BillDealingConfiguration());
        modelBuilder.ApplyConfiguration(new BillDeleteConfiguration());
        modelBuilder.ApplyConfiguration(new BillDeleteEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BillEditConfiguration());
        modelBuilder.ApplyConfiguration(new BillEditEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BillHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new BillItemsSearchViewConfiguration());
        modelBuilder.ApplyConfiguration(new BillPauseConfiguration());
        modelBuilder.ApplyConfiguration(new BillnoteConfiguration());
        modelBuilder.ApplyConfiguration(new BranchCycleConfiguration());
        modelBuilder.ApplyConfiguration(new BranchCycleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new BuyConfiguration());
        modelBuilder.ApplyConfiguration(new BuyPhotoConfiguration());
        modelBuilder.ApplyConfiguration(new BuyincomeConfiguration());
        modelBuilder.ApplyConfiguration(new BuytempConfiguration());
        modelBuilder.ApplyConfiguration(new CStageConfiguration());
        modelBuilder.ApplyConfiguration(new CStageEntryConfiguration());
        modelBuilder.ApplyConfiguration(new CTenderConfiguration());
        modelBuilder.ApplyConfiguration(new CTenderAttachConfiguration());
        modelBuilder.ApplyConfiguration(new CTenderDatumConfiguration());
        modelBuilder.ApplyConfiguration(new CTenderStateConfiguration());
        modelBuilder.ApplyConfiguration(new CTenderTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CalendarEventGeneratorConfiguration());
        modelBuilder.ApplyConfiguration(new CashLogConfiguration());
        modelBuilder.ApplyConfiguration(new CashPaidConfiguration());
        modelBuilder.ApplyConfiguration(new CashRecievedConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeInConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeInInfoConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeInbankConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeInbankDoneConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeIncustConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeIncustReturnConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeInreturnConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeOpeningOutConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeOutConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeOutDoneConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeOutInfoConfiguration());
        modelBuilder.ApplyConfiguration(new ChequeOutReturnedConfiguration());
        modelBuilder.ApplyConfiguration(new CloseUserConfiguration());
        modelBuilder.ApplyConfiguration(new ColNameConfiguration());
        modelBuilder.ApplyConfiguration(new CompanyConfiguration());
        modelBuilder.ApplyConfiguration(new CompanyActivityConfiguration());
        modelBuilder.ApplyConfiguration(new CompanyBranchConfiguration());
        modelBuilder.ApplyConfiguration(new CompanyTaxTokenConfiguration());
        modelBuilder.ApplyConfiguration(new ContCashpaidConfiguration());
        modelBuilder.ApplyConfiguration(new ContCashrecieveConfiguration());
        modelBuilder.ApplyConfiguration(new ContSpentConfiguration());
        modelBuilder.ApplyConfiguration(new ContractConfiguration());
        modelBuilder.ApplyConfiguration(new ContractSubConfiguration());
        modelBuilder.ApplyConfiguration(new ContractSubitemConfiguration());
        modelBuilder.ApplyConfiguration(new ContractitemConfiguration());
        modelBuilder.ApplyConfiguration(new CostCenterConfiguration());
        modelBuilder.ApplyConfiguration(new CostCenterEntryConfiguration());
        modelBuilder.ApplyConfiguration(new CostCenterEstimateConfiguration());
        modelBuilder.ApplyConfiguration(new CostCenterGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CostCenterItemConfiguration());
        modelBuilder.ApplyConfiguration(new CpuConfiguration());
        modelBuilder.ApplyConfiguration(new CrmPotCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new CrmPotPriorityConfiguration());
        modelBuilder.ApplyConfiguration(new CrmPotStatisticConfiguration());
        modelBuilder.ApplyConfiguration(new CrmPreVisitConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyDiffConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyDiffEntryConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyPurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyRateConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencySaleConfiguration());
        modelBuilder.ApplyConfiguration(new CurrencyTableConfiguration());
        modelBuilder.ApplyConfiguration(new CurrentPcConfiguration());
        modelBuilder.ApplyConfiguration(new CustConfiguration());
        modelBuilder.ApplyConfiguration(new CustAddressConfiguration());
        modelBuilder.ApplyConfiguration(new CustBouneConfiguration());
        modelBuilder.ApplyConfiguration(new CustCallConfiguration());
        modelBuilder.ApplyConfiguration(new CustContractConfiguration());
        modelBuilder.ApplyConfiguration(new CustContractEntryConfiguration());
        modelBuilder.ApplyConfiguration(new CustContractLogConfiguration());
        modelBuilder.ApplyConfiguration(new CustConvertConfiguration());
        modelBuilder.ApplyConfiguration(new CustDailyBalanceConfiguration());
        modelBuilder.ApplyConfiguration(new CustDealingConfiguration());
        modelBuilder.ApplyConfiguration(new CustDefaultConfiguration());
        modelBuilder.ApplyConfiguration(new CustDiscountConfiguration());
        modelBuilder.ApplyConfiguration(new CustDonationConfiguration());
        modelBuilder.ApplyConfiguration(new CustFieldConfiguration());
        modelBuilder.ApplyConfiguration(new CustImageConfiguration());
        modelBuilder.ApplyConfiguration(new CustInfoConfiguration());
        modelBuilder.ApplyConfiguration(new CustInstallmentConfiguration());
        modelBuilder.ApplyConfiguration(new CustInstallmentSliceConfiguration());
        modelBuilder.ApplyConfiguration(new CustNetConfiguration());
        modelBuilder.ApplyConfiguration(new CustNoteConfiguration());
        modelBuilder.ApplyConfiguration(new CustOpeningConfiguration());
        modelBuilder.ApplyConfiguration(new CustOpeningEntryConfiguration());
        modelBuilder.ApplyConfiguration(new CustOverviewConfiguration());
        modelBuilder.ApplyConfiguration(new CustPatientConfiguration());
        modelBuilder.ApplyConfiguration(new CustRatingConfiguration());
        modelBuilder.ApplyConfiguration(new CustRatingNameConfiguration());
        modelBuilder.ApplyConfiguration(new CustRatingSystemConfiguration());
        modelBuilder.ApplyConfiguration(new CustTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CustomerDropDownConfiguration());
        modelBuilder.ApplyConfiguration(new CycleConfiguration());
        modelBuilder.ApplyConfiguration(new CyclePermissionConfiguration());
        modelBuilder.ApplyConfiguration(new DailyAssetExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new DailyBankConfiguration());
        modelBuilder.ApplyConfiguration(new DailyBatchNumberConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCashPaidConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCashRecievedConfiguration());
        modelBuilder.ApplyConfiguration(new DailyChargeConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCheckRecievedConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCheckpaidConfiguration());
        modelBuilder.ApplyConfiguration(new DailyChequeInConfiguration());
        modelBuilder.ApplyConfiguration(new DailyChequeOutConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCostCenterConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCustAgingConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCustAgingEntryConfiguration());
        modelBuilder.ApplyConfiguration(new DailyCustServiceConfiguration());
        modelBuilder.ApplyConfiguration(new DailyDateConfiguration());
        modelBuilder.ApplyConfiguration(new DailyEserviceConfiguration());
        modelBuilder.ApplyConfiguration(new DailyFixedAssetConfiguration());
        modelBuilder.ApplyConfiguration(new DailyInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new DailyInvoiceExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new DailyItemCostConfiguration());
        modelBuilder.ApplyConfiguration(new DailyItemDiscountConfiguration());
        modelBuilder.ApplyConfiguration(new DailyItemExtraConfiguration());
        modelBuilder.ApplyConfiguration(new DailyKindConfiguration());
        modelBuilder.ApplyConfiguration(new DailyMaintenanceConfiguration());
        modelBuilder.ApplyConfiguration(new DailyPledgeConfiguration());
        modelBuilder.ApplyConfiguration(new DailyPointConfiguration());
        modelBuilder.ApplyConfiguration(new DailyPotenialConfiguration());
        modelBuilder.ApplyConfiguration(new DailyQuotumConfiguration());
        modelBuilder.ApplyConfiguration(new DailyRentConfiguration());
        modelBuilder.ApplyConfiguration(new DailySalaryConfiguration());
        modelBuilder.ApplyConfiguration(new DailySerialConfiguration());
        modelBuilder.ApplyConfiguration(new DailySmConfiguration());
        modelBuilder.ApplyConfiguration(new DailyStorageConfiguration());
        modelBuilder.ApplyConfiguration(new DailyTaxConfiguration());
        modelBuilder.ApplyConfiguration(new DailyVisaConfiguration());
        modelBuilder.ApplyConfiguration(new DailyWorkPledgeConfiguration());
        modelBuilder.ApplyConfiguration(new DailyassetConfiguration());
        modelBuilder.ApplyConfiguration(new DailycontractConfiguration());
        modelBuilder.ApplyConfiguration(new DailycurrencyConfiguration());
        modelBuilder.ApplyConfiguration(new DailycustConfiguration());
        modelBuilder.ApplyConfiguration(new DailydatConfiguration());
        modelBuilder.ApplyConfiguration(new DailygaConfiguration());
        modelBuilder.ApplyConfiguration(new DailyopConfiguration());
        modelBuilder.ApplyConfiguration(new DailyuserConfiguration());
        modelBuilder.ApplyConfiguration(new DailyworkConfiguration());
        modelBuilder.ApplyConfiguration(new DailyworkHiConfiguration());
        modelBuilder.ApplyConfiguration(new DailyworkpercentConfiguration());
        modelBuilder.ApplyConfiguration(new DailyworkpercentTempConfiguration());
        modelBuilder.ApplyConfiguration(new DbdatumConfiguration());
        modelBuilder.ApplyConfiguration(new DbversionConfiguration());
        modelBuilder.ApplyConfiguration(new DealingConfiguration());
        modelBuilder.ApplyConfiguration(new DealingTableNameConfiguration());
        modelBuilder.ApplyConfiguration(new DefaultFilterPeriodConfiguration());
        modelBuilder.ApplyConfiguration(new DeliveryManConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountAccelerateConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountCashConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountCouponConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountCouponLogConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountGroupConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountItemConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountItemItemConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountQtyConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountQtyItemConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountQtySliceConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountShippingConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountTradeConfiguration());
        modelBuilder.ApplyConfiguration(new DiscountTradePermissionConfiguration());
        modelBuilder.ApplyConfiguration(new DropDownItemStoreConfiguration());
        modelBuilder.ApplyConfiguration(new EditHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new EgyptTaxMainConfiguration());
        modelBuilder.ApplyConfiguration(new EinvoiceMappingConfiguration());
        modelBuilder.ApplyConfiguration(new EmpDailyPayrollConfiguration());
        modelBuilder.ApplyConfiguration(new EmplContractTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new EmplHiringConfiguration());
        modelBuilder.ApplyConfiguration(new EmplLoanConfiguration());
        modelBuilder.ApplyConfiguration(new EmplLoanEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalariesSliceConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalariesSliceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryCalcConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryCalcEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryCalcEntryAccountConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryPayConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryPayEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSalaryPeriodConfiguration());
        modelBuilder.ApplyConfiguration(new EmplSkillConfiguration());
        modelBuilder.ApplyConfiguration(new EmplTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new EmplTransactionEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EmplWorkShiftConfiguration());
        modelBuilder.ApplyConfiguration(new EmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateDailyConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateDealingConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateDistributeConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateItemConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateShipConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateShipEntryConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateShipItemConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateShippingCompanyConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateSpentItemConfiguration());
        modelBuilder.ApplyConfiguration(new EstimateTypeConfiguration());
        modelBuilder.ApplyConfiguration(new EticketConfiguration());
        modelBuilder.ApplyConfiguration(new EticketCustomerConfiguration());
        modelBuilder.ApplyConfiguration(new EticketDemandingConfiguration());
        modelBuilder.ApplyConfiguration(new EticketTempConfiguration());
        modelBuilder.ApplyConfiguration(new EticketUserConfiguration());
        modelBuilder.ApplyConfiguration(new ExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesBranchConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesClassConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesEntryItemConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesItemConfiguration());
        modelBuilder.ApplyConfiguration(new ExpensesItemsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ExportstockConfiguration());
        modelBuilder.ApplyConfiguration(new ExtraItemConfiguration());
        modelBuilder.ApplyConfiguration(new ExtraItemEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreComeConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreGoConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreInConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreInEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreItemPriceConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreMachineConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreOutConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreOutEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreStageConfiguration());
        modelBuilder.ApplyConfiguration(new FactoreStoreConfiguration());
        modelBuilder.ApplyConfiguration(new FavoriteConfiguration());
        modelBuilder.ApplyConfiguration(new FavoriteformConfiguration());
        modelBuilder.ApplyConfiguration(new FinalDatumConfiguration());
        modelBuilder.ApplyConfiguration(new FinalDayReportConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetAreaConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetAreaFileConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetAreaGroupConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetBranchTransferConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetCategoryFileConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetCategoryGroupConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDailyDeprecateConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDailyDeprecateFileConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDailyDeprecateGroupConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDeprecationMethodFileConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDeprecationMethodGroupConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetDepreciationConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetFileConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetGroupConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetMasterDepreciationConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetPremiumConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetPurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetPurchaseEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRecalcConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentCollectConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentCustConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentCustEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentMethodConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentOptConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetRentOptEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetSaleConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetSaleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetScrapConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetsCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new FixedAssetsMainConfiguration());
        modelBuilder.ApplyConfiguration(new FoodMealConfiguration());
        modelBuilder.ApplyConfiguration(new FoodlayoutConfiguration());
        modelBuilder.ApplyConfiguration(new FoodtempConfiguration());
        modelBuilder.ApplyConfiguration(new FrmlayoutConfiguration());
        modelBuilder.ApplyConfiguration(new FuelTypeConfiguration());
        modelBuilder.ApplyConfiguration(new GetCashPaidConfiguration());
        modelBuilder.ApplyConfiguration(new GetCashRecievedConfiguration());
        modelBuilder.ApplyConfiguration(new GetExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new GetStorageSendMoneyConfiguration());
        modelBuilder.ApplyConfiguration(new GetStorageTransformConfiguration());
        modelBuilder.ApplyConfiguration(new GlIncomeConfiguration());
        modelBuilder.ApplyConfiguration(new GrouplayoutConfiguration());
        modelBuilder.ApplyConfiguration(new HrAllowanceConfiguration());
        modelBuilder.ApplyConfiguration(new HrAssetConfiguration());
        modelBuilder.ApplyConfiguration(new HrAttendPolicyConfiguration());
        modelBuilder.ApplyConfiguration(new HrAttendPolicyEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrAttendanceSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrContractTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new HrContractTypeConfiguration());
        modelBuilder.ApplyConfiguration(new HrCreditCardConfiguration());
        modelBuilder.ApplyConfiguration(new HrDocumentConfiguration());
        modelBuilder.ApplyConfiguration(new HrExcelSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrExperienceConfiguration());
        modelBuilder.ApplyConfiguration(new HrFingerPrintSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrIndexConfiguration());
        modelBuilder.ApplyConfiguration(new HrInsuranceSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrJobInfoConfiguration());
        modelBuilder.ApplyConfiguration(new HrLoanItemConfiguration());
        modelBuilder.ApplyConfiguration(new HrLoanedAssetConfiguration());
        modelBuilder.ApplyConfiguration(new HrPayrollScheduleConfiguration());
        modelBuilder.ApplyConfiguration(new HrProctionPercConfiguration());
        modelBuilder.ApplyConfiguration(new HrProctionPercEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrSalariesEquationConfiguration());
        modelBuilder.ApplyConfiguration(new HrSalariesGroupConfiguration());
        modelBuilder.ApplyConfiguration(new HrSalaryConfiguration());
        modelBuilder.ApplyConfiguration(new HrSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrSkillConfiguration());
        modelBuilder.ApplyConfiguration(new HrTaskConfiguration());
        modelBuilder.ApplyConfiguration(new HrTaxSettingConfiguration());
        modelBuilder.ApplyConfiguration(new HrTaxSettingsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffAgendaEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffAgendumConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffPolicyConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffPolicyEntryConfiguration());
        modelBuilder.ApplyConfiguration(new HrTimeOffTypeConfiguration());
        modelBuilder.ApplyConfiguration(new HrTrainingCourseConfiguration());
        modelBuilder.ApplyConfiguration(new HrVacationTypeConfiguration());
        modelBuilder.ApplyConfiguration(new HrWorkShiftConfiguration());
        modelBuilder.ApplyConfiguration(new HrWorkTimeConfiguration());
        modelBuilder.ApplyConfiguration(new HrWorkTimeEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ImportCostConfiguration());
        modelBuilder.ApplyConfiguration(new ImportorderConfiguration());
        modelBuilder.ApplyConfiguration(new IncomeConfiguration());
        modelBuilder.ApplyConfiguration(new Income1Configuration());
        modelBuilder.ApplyConfiguration(new IncomeItemConfiguration());
        modelBuilder.ApplyConfiguration(new IncomeItemsBranchConfiguration());
        modelBuilder.ApplyConfiguration(new IncomesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new InstallmentConfiguration());
        modelBuilder.ApplyConfiguration(new InstallmentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new InstallmentInvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new InstallmentLogConfiguration());
        modelBuilder.ApplyConfiguration(new InstallmentSettingConfiguration());
        modelBuilder.ApplyConfiguration(new InsurancesCompanyConfiguration());
        modelBuilder.ApplyConfiguration(new InsurancesItemConfiguration());
        modelBuilder.ApplyConfiguration(new InsurancesItemsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new InsurancesPercentConfiguration());
        modelBuilder.ApplyConfiguration(new InvTypeStatusConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceDepartmentConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceDepartmentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceExpenseConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceExpensesLogConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceInstallmentConfiguration());
        modelBuilder.ApplyConfiguration(new InvoiceMustSaveConfiguration());
        modelBuilder.ApplyConfiguration(new InvoicePrefixConfiguration());
        modelBuilder.ApplyConfiguration(new InvoicePrefixListConfiguration());
        modelBuilder.ApplyConfiguration(new InvoicesSettingConfiguration());
        modelBuilder.ApplyConfiguration(new ItemAdjustmentConfiguration());
        modelBuilder.ApplyConfiguration(new ItemColorConfiguration());
        modelBuilder.ApplyConfiguration(new ItemRepaireDoneConfiguration());
        modelBuilder.ApplyConfiguration(new ItemRepaireMenuConfiguration());
        modelBuilder.ApplyConfiguration(new ItemRepaireTalabConfiguration());
        modelBuilder.ApplyConfiguration(new ItemReviewConfiguration());
        modelBuilder.ApplyConfiguration(new ItemSearchConfiguration());
        modelBuilder.ApplyConfiguration(new ItemSizeConfiguration());
        modelBuilder.ApplyConfiguration(new ItemStyleSearchConfiguration());
        modelBuilder.ApplyConfiguration(new ItemUniteConfiguration());
        modelBuilder.ApplyConfiguration(new ItemsRequestConfiguration());
        modelBuilder.ApplyConfiguration(new ItemsRequestEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ItemsRequestLogConfiguration());
        modelBuilder.ApplyConfiguration(new KindConfiguration());
        modelBuilder.ApplyConfiguration(new KindActiveSubJectConfiguration());
        modelBuilder.ApplyConfiguration(new KindAntiUsageConfiguration());
        modelBuilder.ApplyConfiguration(new KindAssemblyConfiguration());
        modelBuilder.ApplyConfiguration(new KindBouneConfiguration());
        modelBuilder.ApplyConfiguration(new KindBounesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new KindBounesItemConfiguration());
        modelBuilder.ApplyConfiguration(new KindColorConfiguration());
        modelBuilder.ApplyConfiguration(new KindCreatorConfiguration());
        modelBuilder.ApplyConfiguration(new KindDefaultConfiguration());
        modelBuilder.ApplyConfiguration(new KindDescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new KindDrugConfiguration());
        modelBuilder.ApplyConfiguration(new KindEquationConfiguration());
        modelBuilder.ApplyConfiguration(new KindExprConfiguration());
        modelBuilder.ApplyConfiguration(new KindExprEditConfiguration());
        modelBuilder.ApplyConfiguration(new KindFreeConfiguration());
        modelBuilder.ApplyConfiguration(new KindGenericConfiguration());
        modelBuilder.ApplyConfiguration(new KindGpcConfiguration());
        modelBuilder.ApplyConfiguration(new KindGroupDefaultConfiguration());
        modelBuilder.ApplyConfiguration(new KindGroupEquationConfiguration());
        modelBuilder.ApplyConfiguration(new KindImageConfiguration());
        modelBuilder.ApplyConfiguration(new KindLocalConfiguration());
        modelBuilder.ApplyConfiguration(new KindNoteConfiguration());
        modelBuilder.ApplyConfiguration(new KindOptConfiguration());
        modelBuilder.ApplyConfiguration(new KindOrderConfiguration());
        modelBuilder.ApplyConfiguration(new KindPickConfiguration());
        modelBuilder.ApplyConfiguration(new KindPriceEquationConfiguration());
        modelBuilder.ApplyConfiguration(new KindQoutaEntryConfiguration());
        modelBuilder.ApplyConfiguration(new KindQoutumConfiguration());
        modelBuilder.ApplyConfiguration(new KindScientificConfiguration());
        modelBuilder.ApplyConfiguration(new KindSizeConfiguration());
        modelBuilder.ApplyConfiguration(new KindStockConfiguration());
        modelBuilder.ApplyConfiguration(new KindStorageConditionConfiguration());
        modelBuilder.ApplyConfiguration(new KindStyleColorConfiguration());
        modelBuilder.ApplyConfiguration(new KindStyleSizeConfiguration());
        modelBuilder.ApplyConfiguration(new KindTagConfiguration());
        modelBuilder.ApplyConfiguration(new KindUniteConfiguration());
        modelBuilder.ApplyConfiguration(new KindUsageConfiguration());
        modelBuilder.ApplyConfiguration(new KindUseWayConfiguration());
        modelBuilder.ApplyConfiguration(new LangConfiguration());
        modelBuilder.ApplyConfiguration(new LanguageConfiguration());
        modelBuilder.ApplyConfiguration(new LayoutConfiguration());
        modelBuilder.ApplyConfiguration(new LogHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new MailSettngConfiguration());
        modelBuilder.ApplyConfiguration(new MailTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new MaindailyConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceAccessoriesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceAccessoryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceDamageConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceDeliveryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceExtraConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceItemConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceItemsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new MaintenanceTaskConfiguration());
        modelBuilder.ApplyConfiguration(new MenuConfiguration());
        modelBuilder.ApplyConfiguration(new MenuHideFromConfiguration());
        modelBuilder.ApplyConfiguration(new MenuHideReportConfiguration());
        modelBuilder.ApplyConfiguration(new MenuTileHomeConfiguration());
        modelBuilder.ApplyConfiguration(new MostvisitedConfiguration());
        modelBuilder.ApplyConfiguration(new MotalabaConfiguration());
        modelBuilder.ApplyConfiguration(new MyTableConfiguration());
        modelBuilder.ApplyConfiguration(new NethistoryConfiguration());
        modelBuilder.ApplyConfiguration(new NoteQuickConfiguration());
        modelBuilder.ApplyConfiguration(new OnlineUserConfiguration());
        modelBuilder.ApplyConfiguration(new OpOrderConfiguration());
        modelBuilder.ApplyConfiguration(new OrderSaleQtyConfiguration());
        modelBuilder.ApplyConfiguration(new OwnerConfiguration());
        modelBuilder.ApplyConfiguration(new PaidBillConfiguration());
        modelBuilder.ApplyConfiguration(new PartnerConfiguration());
        modelBuilder.ApplyConfiguration(new PartnerGroupConfiguration());
        modelBuilder.ApplyConfiguration(new PatientConfiguration());
        modelBuilder.ApplyConfiguration(new PaymentLogConfiguration());
        modelBuilder.ApplyConfiguration(new PaymentTermConfiguration());
        modelBuilder.ApplyConfiguration(new PhoneindexConfiguration());
        modelBuilder.ApplyConfiguration(new PledgeConfiguration());
        modelBuilder.ApplyConfiguration(new PluginConfiguration());
        modelBuilder.ApplyConfiguration(new PointCustConfiguration());
        modelBuilder.ApplyConfiguration(new PointCustomerConfiguration());
        modelBuilder.ApplyConfiguration(new PointPatnerPayConfiguration());
        modelBuilder.ApplyConfiguration(new PointPropertyConfiguration());
        modelBuilder.ApplyConfiguration(new PointScenarioConfiguration());
        modelBuilder.ApplyConfiguration(new PointsCardConfiguration());
        modelBuilder.ApplyConfiguration(new PointsCardSettingConfiguration());
        modelBuilder.ApplyConfiguration(new PointsSettingConfiguration());
        modelBuilder.ApplyConfiguration(new PointsSliceConfiguration());
        modelBuilder.ApplyConfiguration(new PosHallConfiguration());
        modelBuilder.ApplyConfiguration(new PosHallEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PosPendingDeliveryConfiguration());
        modelBuilder.ApplyConfiguration(new PosPendingDeliveryEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PosSaleConfiguration());
        modelBuilder.ApplyConfiguration(new PosSaleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PotCallConfiguration());
        modelBuilder.ApplyConfiguration(new PotDeleteLogConfiguration());
        modelBuilder.ApplyConfiguration(new PotDemoConfiguration());
        modelBuilder.ApplyConfiguration(new PotFeatureConfiguration());
        modelBuilder.ApplyConfiguration(new PotGroupConfiguration());
        modelBuilder.ApplyConfiguration(new PotMailConfiguration());
        modelBuilder.ApplyConfiguration(new PotRateConfiguration());
        modelBuilder.ApplyConfiguration(new PotServiceConfiguration());
        modelBuilder.ApplyConfiguration(new PotVisitConfiguration());
        modelBuilder.ApplyConfiguration(new PotentialCustomerConfiguration());
        modelBuilder.ApplyConfiguration(new PreGridEquationConfiguration());
        modelBuilder.ApplyConfiguration(new PreNameFieldConfiguration());
        modelBuilder.ApplyConfiguration(new PreNameFieldsListConfiguration());
        modelBuilder.ApplyConfiguration(new PreNameUniteConfiguration());
        modelBuilder.ApplyConfiguration(new PreferenceConfiguration());
        modelBuilder.ApplyConfiguration(new PrefrenceConfiguration());
        modelBuilder.ApplyConfiguration(new PrefrenceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PriceGroupConfiguration());
        modelBuilder.ApplyConfiguration(new PriceNameConfiguration());
        modelBuilder.ApplyConfiguration(new PriceScannerNewsConfiguration());
        modelBuilder.ApplyConfiguration(new PrintCustomertotalConfiguration());
        modelBuilder.ApplyConfiguration(new ProjectConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseConfirmConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseConfirmEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseCycleConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseCycleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseImportConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseImportEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseItemsCycleConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseOrderConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseOrderEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseOrderItemConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseOrderQtyConfiguration());
        modelBuilder.ApplyConfiguration(new PurchasePaymentConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteItemConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteRecieveConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteRecieveEntryConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseQuoteStepConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseServiceConfiguration());
        modelBuilder.ApplyConfiguration(new PurchaseServiceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new QuickStartConfiguration());
        modelBuilder.ApplyConfiguration(new RFloorConfiguration());
        modelBuilder.ApplyConfiguration(new RKitchenConfiguration());
        modelBuilder.ApplyConfiguration(new RTableConfiguration());
        modelBuilder.ApplyConfiguration(new RePurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new RePurchaseEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RePurchasePaymentConfiguration());
        modelBuilder.ApplyConfiguration(new ReSaleConfiguration());
        modelBuilder.ApplyConfiguration(new ReSaleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ReSalePaymentConfiguration());
        modelBuilder.ApplyConfiguration(new RecieveConsignmentConfiguration());
        modelBuilder.ApplyConfiguration(new RecieveConsignmentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RecieveConsignmentQtyConfiguration());
        modelBuilder.ApplyConfiguration(new RefreshTokenConfiguration());
        modelBuilder.ApplyConfiguration(new RentAssetConfiguration());
        modelBuilder.ApplyConfiguration(new RentFormConfiguration());
        modelBuilder.ApplyConfiguration(new RentInstallmentConfiguration());
        modelBuilder.ApplyConfiguration(new RentOptConfiguration());
        modelBuilder.ApplyConfiguration(new RepManConfiguration());
        modelBuilder.ApplyConfiguration(new RepManEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RepPercConfiguration());
        modelBuilder.ApplyConfiguration(new RepPercEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RepSliceConfiguration());
        modelBuilder.ApplyConfiguration(new RepSliceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RepVendorPercConfiguration());
        modelBuilder.ApplyConfiguration(new RepVendorPercEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ReportConfiguration());
        modelBuilder.ApplyConfiguration(new ReportCenterConfiguration());
        modelBuilder.ApplyConfiguration(new ReportCenterShortcutConfiguration());
        modelBuilder.ApplyConfiguration(new ReportFileConfiguration());
        modelBuilder.ApplyConfiguration(new ReportTableDatumConfiguration());
        modelBuilder.ApplyConfiguration(new ReportTemplateTableConfiguration());
        modelBuilder.ApplyConfiguration(new ReportsGroupConfiguration());
        modelBuilder.ApplyConfiguration(new ReportsTileConfiguration());
        modelBuilder.ApplyConfiguration(new ResFloorConfiguration());
        modelBuilder.ApplyConfiguration(new ResTableConfiguration());
        modelBuilder.ApplyConfiguration(new ResTableBookingConfiguration());
        modelBuilder.ApplyConfiguration(new ResTableBookingEntryConfiguration());
        modelBuilder.ApplyConfiguration(new ResTableOrderConfiguration());
        modelBuilder.ApplyConfiguration(new ResTableTypeConfiguration());
        modelBuilder.ApplyConfiguration(new ResTransactionLogConfiguration());
        modelBuilder.ApplyConfiguration(new ResourceConfiguration());
        modelBuilder.ApplyConfiguration(new RestoreTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new ReturnConsignmentConfiguration());
        modelBuilder.ApplyConfiguration(new ReturnConsignmentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RoleConfiguration());
        modelBuilder.ApplyConfiguration(new RpsAccountConfiguration());
        modelBuilder.ApplyConfiguration(new RpsBankConfiguration());
        modelBuilder.ApplyConfiguration(new RpsItemConfiguration());
        modelBuilder.ApplyConfiguration(new RpsItemIndexConfiguration());
        modelBuilder.ApplyConfiguration(new RpsItemIndexEnConfiguration());
        modelBuilder.ApplyConfiguration(new RpsItemIndexFrConfiguration());
        modelBuilder.ApplyConfiguration(new RsdBillMappingConfiguration());
        modelBuilder.ApplyConfiguration(new RsdBillMappingEntryConfiguration());
        modelBuilder.ApplyConfiguration(new RsdSettingConfiguration());
        modelBuilder.ApplyConfiguration(new RsdUserConfiguration());
        modelBuilder.ApplyConfiguration(new RspItemAloneConfiguration());
        modelBuilder.ApplyConfiguration(new RssConfiguration());
        modelBuilder.ApplyConfiguration(new RtlErrorConfiguration());
        modelBuilder.ApplyConfiguration(new RtlTileConfiguration());
        modelBuilder.ApplyConfiguration(new SadadServiceConfiguration());
        modelBuilder.ApplyConfiguration(new SadadServiceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesCalcConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesCalcAlertConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesCalcEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesCalcPaidSolfaConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesPayConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesPayEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesRepeatMethodConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesSliceConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesWorkConfiguration());
        modelBuilder.ApplyConfiguration(new SalariesWorkUpgradeConfiguration());
        modelBuilder.ApplyConfiguration(new SalaryCalcLogConfiguration());
        modelBuilder.ApplyConfiguration(new SalaryItemDefTypeConfiguration());
        modelBuilder.ApplyConfiguration(new SalaryItemTypeConfiguration());
        modelBuilder.ApplyConfiguration(new SalaryLevelConfiguration());
        modelBuilder.ApplyConfiguration(new SalaryPeriodConfiguration());
        modelBuilder.ApplyConfiguration(new SaleConfiguration());
        modelBuilder.ApplyConfiguration(new SaleConfirmConfiguration());
        modelBuilder.ApplyConfiguration(new SaleConfirmEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SaleEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SaleEstimateConfiguration());
        modelBuilder.ApplyConfiguration(new SaleEstimateEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SaleOrderConfiguration());
        modelBuilder.ApplyConfiguration(new SaleOrderEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SaleOrderItemConfiguration());
        modelBuilder.ApplyConfiguration(new SalePaymentConfiguration());
        modelBuilder.ApplyConfiguration(new SaleQouteConfiguration());
        modelBuilder.ApplyConfiguration(new SaleQouteEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SaleTotalConfiguration());
        modelBuilder.ApplyConfiguration(new SaletempConfiguration());
        modelBuilder.ApplyConfiguration(new SavedocConfiguration());
        modelBuilder.ApplyConfiguration(new SerialConfiguration());
        modelBuilder.ApplyConfiguration(new ShBalance00Configuration());
        modelBuilder.ApplyConfiguration(new ShBoxOpeningConfiguration());
        modelBuilder.ApplyConfiguration(new ShBoxRecieveConfiguration());
        modelBuilder.ApplyConfiguration(new ShBoxSettingConfiguration());
        modelBuilder.ApplyConfiguration(new ShBoxTransferConfiguration());
        modelBuilder.ApplyConfiguration(new ShBranchDailyActionConfiguration());
        modelBuilder.ApplyConfiguration(new ShDailyBoxConfiguration());
        modelBuilder.ApplyConfiguration(new ShDailyMsgConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgBalanceConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgOpenConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgSaleConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgSaleAlarmConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgSettingConfiguration());
        modelBuilder.ApplyConfiguration(new ShMsgSpentConfiguration());
        modelBuilder.ApplyConfiguration(new ShPurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new ShRentConfiguration());
        modelBuilder.ApplyConfiguration(new ShSaleConfiguration());
        modelBuilder.ApplyConfiguration(new ShippingCarConfiguration());
        modelBuilder.ApplyConfiguration(new ShippingCarUsageConfiguration());
        modelBuilder.ApplyConfiguration(new ShippingDriverConfiguration());
        modelBuilder.ApplyConfiguration(new ShippingFuelConfiguration());
        modelBuilder.ApplyConfiguration(new ShortCutConfiguration());
        modelBuilder.ApplyConfiguration(new SliceConfiguration());
        modelBuilder.ApplyConfiguration(new SliceDefaultConfiguration());
        modelBuilder.ApplyConfiguration(new SliceKindfactorConfiguration());
        modelBuilder.ApplyConfiguration(new SliceRepresentConfiguration());
        modelBuilder.ApplyConfiguration(new SliceWorkDayConfiguration());
        modelBuilder.ApplyConfiguration(new SmConfiguration());
        modelBuilder.ApplyConfiguration(new SmsSettingConfiguration());
        modelBuilder.ApplyConfiguration(new SmsalertConfiguration());
        modelBuilder.ApplyConfiguration(new SmsalertEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SmscustGroupConfiguration());
        modelBuilder.ApplyConfiguration(new SmscustGroupEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SmserrorConfiguration());
        modelBuilder.ApplyConfiguration(new SmsnotificationConfiguration());
        modelBuilder.ApplyConfiguration(new SmspatrolConfiguration());
        modelBuilder.ApplyConfiguration(new SmssendingConfiguration());
        modelBuilder.ApplyConfiguration(new SmssendingEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SmstemplateConfiguration());
        modelBuilder.ApplyConfiguration(new SmsvariableConfiguration());
        modelBuilder.ApplyConfiguration(new SrvcClassConfiguration());
        modelBuilder.ApplyConfiguration(new SrvcItemConfiguration());
        modelBuilder.ApplyConfiguration(new SrvcRecieveConfiguration());
        modelBuilder.ApplyConfiguration(new SrvcStoreConfiguration());
        modelBuilder.ApplyConfiguration(new StorageConfiguration());
        modelBuilder.ApplyConfiguration(new StorageSendMoneyConfiguration());
        modelBuilder.ApplyConfiguration(new StorageTransformConfiguration());
        modelBuilder.ApplyConfiguration(new StoreAdjustmentConfiguration());
        modelBuilder.ApplyConfiguration(new StoreAdjustmentEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreAssemblyConfiguration());
        modelBuilder.ApplyConfiguration(new StoreAssemblyEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreCharityConfiguration());
        modelBuilder.ApplyConfiguration(new StoreCharityEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreConvertConfiguration());
        modelBuilder.ApplyConfiguration(new StoreConvertEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreDisAssemblyConfiguration());
        modelBuilder.ApplyConfiguration(new StoreDisAssemblyEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreHalekConfiguration());
        modelBuilder.ApplyConfiguration(new StoreHalekEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreInConfiguration());
        modelBuilder.ApplyConfiguration(new StoreInEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreInTransferConfiguration());
        modelBuilder.ApplyConfiguration(new StoreInTransferEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreIssueConfiguration());
        modelBuilder.ApplyConfiguration(new StoreIssueEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreItemIdConfiguration());
        modelBuilder.ApplyConfiguration(new StoreItemIdStyleConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOpeningConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOpeningEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOutConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOutEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOutTransferConfiguration());
        modelBuilder.ApplyConfiguration(new StoreOutTransferEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingCancelConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingCancelEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingOrderConfiguration());
        modelBuilder.ApplyConfiguration(new StorePackingOrderEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreRecieveConfiguration());
        modelBuilder.ApplyConfiguration(new StoreRecieveEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreSendOrderConfiguration());
        modelBuilder.ApplyConfiguration(new StoreSendOrderEntryConfiguration());
        modelBuilder.ApplyConfiguration(new StoreTransactionTypeConfiguration());
        modelBuilder.ApplyConfiguration(new StoreTransferOrderConfiguration());
        modelBuilder.ApplyConfiguration(new StoreTransferOrderEntryConfiguration());
        modelBuilder.ApplyConfiguration(new SupportCommunicationConfiguration());
        modelBuilder.ApplyConfiguration(new SupportExtraFieldConfiguration());
        modelBuilder.ApplyConfiguration(new SupportLevelConfiguration());
        modelBuilder.ApplyConfiguration(new SupportNoteConfiguration());
        modelBuilder.ApplyConfiguration(new SupportPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new SupportPriorityConfiguration());
        modelBuilder.ApplyConfiguration(new SupportProductConfiguration());
        modelBuilder.ApplyConfiguration(new SupportStatusConfiguration());
        modelBuilder.ApplyConfiguration(new SupportTicketConfiguration());
        modelBuilder.ApplyConfiguration(new SupportTypeConfiguration());
        modelBuilder.ApplyConfiguration(new SyncConfiguration());
        modelBuilder.ApplyConfiguration(new TableConfiguration());
        modelBuilder.ApplyConfiguration(new TahselBillConfiguration());
        modelBuilder.ApplyConfiguration(new TahselMotalbaConfiguration());
        modelBuilder.ApplyConfiguration(new TaskHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new TaskIdMappingConfiguration());
        modelBuilder.ApplyConfiguration(new TaskMapAppointmentConfiguration());
        modelBuilder.ApplyConfiguration(new TaskMapDependencyConfiguration());
        modelBuilder.ApplyConfiguration(new TaskMapResourceConfiguration());
        modelBuilder.ApplyConfiguration(new TaxEgyptHomeConfiguration());
        modelBuilder.ApplyConfiguration(new TaxEgyptSettingConfiguration());
        modelBuilder.ApplyConfiguration(new TaxValidationConfiguration());
        modelBuilder.ApplyConfiguration(new TaxValidationResultConfiguration());
        modelBuilder.ApplyConfiguration(new TaxValidationResultErrorConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesAdjustConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesDatConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesGroupConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesPayConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesSubGroupConfiguration());
        modelBuilder.ApplyConfiguration(new TaxesConfiguration());
        modelBuilder.ApplyConfiguration(new TechnicianConfiguration());
        modelBuilder.ApplyConfiguration(new TechniciansEntryConfiguration());
        modelBuilder.ApplyConfiguration(new TeleSalesRevisionConfiguration());
        modelBuilder.ApplyConfiguration(new TempAccountcompaireConfiguration());
        modelBuilder.ApplyConfiguration(new TempConvertConfiguration());
        modelBuilder.ApplyConfiguration(new TempError01Configuration());
        modelBuilder.ApplyConfiguration(new TempFinalDatumConfiguration());
        modelBuilder.ApplyConfiguration(new TempInhanddataAvgConfiguration());
        modelBuilder.ApplyConfiguration(new TempInvoiceTableEntryConfiguration());
        modelBuilder.ApplyConfiguration(new TempProcessdatumConfiguration());
        modelBuilder.ApplyConfiguration(new TempPurchaseConfiguration());
        modelBuilder.ApplyConfiguration(new TempPurchaseAvgConfiguration());
        modelBuilder.ApplyConfiguration(new TempPurchaseIdusedForAvgConfiguration());
        modelBuilder.ApplyConfiguration(new TempSellConfiguration());
        modelBuilder.ApplyConfiguration(new TempSellAvgConfiguration());
        modelBuilder.ApplyConfiguration(new TempitemprofitConfiguration());
        modelBuilder.ApplyConfiguration(new Tempitemprofit1Configuration());
        modelBuilder.ApplyConfiguration(new TipConfiguration());
        modelBuilder.ApplyConfiguration(new TmpStoreTableConfiguration());
        modelBuilder.ApplyConfiguration(new TodayDateConfiguration());
        modelBuilder.ApplyConfiguration(new TransComeConfiguration());
        modelBuilder.ApplyConfiguration(new TransGoConfiguration());
        modelBuilder.ApplyConfiguration(new TransStockConfiguration());
        modelBuilder.ApplyConfiguration(new TranslateConfiguration());
        modelBuilder.ApplyConfiguration(new TripAirLineConfiguration());
        modelBuilder.ApplyConfiguration(new TripAirLineCommissionConfiguration());
        modelBuilder.ApplyConfiguration(new TripAirportConfiguration());
        modelBuilder.ApplyConfiguration(new TripCommissionConfiguration());
        modelBuilder.ApplyConfiguration(new TripCommissionEntryConfiguration());
        modelBuilder.ApplyConfiguration(new TripContractConfiguration());
        modelBuilder.ApplyConfiguration(new TripDateRangeConfiguration());
        modelBuilder.ApplyConfiguration(new TripDemandingConfiguration());
        modelBuilder.ApplyConfiguration(new TripDemanding1Configuration());
        modelBuilder.ApplyConfiguration(new TripDirectionTypeConfiguration());
        modelBuilder.ApplyConfiguration(new TripExcelSettingConfiguration());
        modelBuilder.ApplyConfiguration(new TripGdConfiguration());
        modelBuilder.ApplyConfiguration(new TripHomeConfiguration());
        modelBuilder.ApplyConfiguration(new TripIatumConfiguration());
        modelBuilder.ApplyConfiguration(new TripItineraryTypeConfiguration());
        modelBuilder.ApplyConfiguration(new TripRequireFieldConfiguration());
        modelBuilder.ApplyConfiguration(new TripStatusConfiguration());
        modelBuilder.ApplyConfiguration(new TripTicketConfiguration());
        modelBuilder.ApplyConfiguration(new TripTicketTempConfiguration());
        modelBuilder.ApplyConfiguration(new TripUserConfiguration());
        modelBuilder.ApplyConfiguration(new TtConfiguration());
        modelBuilder.ApplyConfiguration(new UnitConfiguration());
        modelBuilder.ApplyConfiguration(new UniteCodeConfiguration());
        modelBuilder.ApplyConfiguration(new UnitsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new UpdateReSaleTranConfiguration());
        modelBuilder.ApplyConfiguration(new UserConfiguration());
        modelBuilder.ApplyConfiguration(new UserAnyDeskSettingConfiguration());
        modelBuilder.ApplyConfiguration(new UserAttentionConfiguration());
        modelBuilder.ApplyConfiguration(new UserBranchConfiguration());
        modelBuilder.ApplyConfiguration(new UserDefaultAccountConfiguration());
        modelBuilder.ApplyConfiguration(new UserDefaultInvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new UserDepartmentConfiguration());
        modelBuilder.ApplyConfiguration(new UserJobConfiguration());
        modelBuilder.ApplyConfiguration(new UserNotificationConfiguration());
        modelBuilder.ApplyConfiguration(new UserNotificationEntryConfiguration());
        modelBuilder.ApplyConfiguration(new UserOpenDayConfiguration());
        modelBuilder.ApplyConfiguration(new UserOpenDayEntryConfiguration());
        modelBuilder.ApplyConfiguration(new UserOptionConfiguration());
        modelBuilder.ApplyConfiguration(new UserPaymentMethodConfiguration());
        modelBuilder.ApplyConfiguration(new UserPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new UserPropertyConfiguration());
        modelBuilder.ApplyConfiguration(new UserSettingConfiguration());
        modelBuilder.ApplyConfiguration(new UserStoreConfiguration());
        modelBuilder.ApplyConfiguration(new UsersLogConfiguration());
        modelBuilder.ApplyConfiguration(new UsersLogEntryConfiguration());
        modelBuilder.ApplyConfiguration(new UsersPrivilegeConfiguration());
        modelBuilder.ApplyConfiguration(new UsersPrivilegesEntryConfiguration());
        modelBuilder.ApplyConfiguration(new UsersResourceConfiguration());
        modelBuilder.ApplyConfiguration(new VisaConfiguration());
        modelBuilder.ApplyConfiguration(new WJobConfiguration());
        modelBuilder.ApplyConfiguration(new WTempattendanceConfiguration());
        modelBuilder.ApplyConfiguration(new WooCategoryMapperConfiguration());
        modelBuilder.ApplyConfiguration(new WooCustomerMapperConfiguration());
        modelBuilder.ApplyConfiguration(new WooKindMapperConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderBillingConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderCouponLineConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderCouponLineMetumConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderFeeLineConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderLineItemConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderMapperConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderMetumConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderRefundLineConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderShippingConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderShippingLineConfiguration());
        modelBuilder.ApplyConfiguration(new WooOrderTaxLineConfiguration());
        modelBuilder.ApplyConfiguration(new WooSettingConfiguration());
        modelBuilder.ApplyConfiguration(new WooTaxItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAbsentConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAbsentBalanceConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAbsentCauseConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAlarmConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAttendConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAttendanceConfiguration());
        modelBuilder.ApplyConfiguration(new WorkAttendanceInOutConfiguration());
        modelBuilder.ApplyConfiguration(new WorkBonuConfiguration());
        modelBuilder.ApplyConfiguration(new WorkDealingConfiguration());
        modelBuilder.ApplyConfiguration(new WorkDiscountConfiguration());
        modelBuilder.ApplyConfiguration(new WorkDiscountItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkEservicePayConfiguration());
        modelBuilder.ApplyConfiguration(new WorkEserviceReceiveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkEvaluationConfiguration());
        modelBuilder.ApplyConfiguration(new WorkEvaluationItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkEvaluationRateConfiguration());
        modelBuilder.ApplyConfiguration(new WorkExtraItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkExtradayConfiguration());
        modelBuilder.ApplyConfiguration(new WorkExtrahourConfiguration());
        modelBuilder.ApplyConfiguration(new WorkFactoreConfiguration());
        modelBuilder.ApplyConfiguration(new WorkFactoreEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkFileConfiguration());
        modelBuilder.ApplyConfiguration(new WorkFingerLogConfiguration());
        modelBuilder.ApplyConfiguration(new WorkGroupConfiguration());
        modelBuilder.ApplyConfiguration(new WorkIncentiveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkIncentiveItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInoutTempConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInstallmentConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInstallmentsEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInstallmentsItemEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new WorkInsuranceEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkItineraryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkItineraryEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkLeaveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkMonthlyConfiguration());
        modelBuilder.ApplyConfiguration(new WorkMoveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPaidSalaryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPayInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPayRollItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPayTaxConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPercentConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPeriodConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPeriodChangeConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPeriodEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPinkConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPledgeConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPledgeAdjustConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPledgePayConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPledgeReceiveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkPledgeTypeConfiguration());
        modelBuilder.ApplyConfiguration(new WorkRefusalConfiguration());
        modelBuilder.ApplyConfiguration(new WorkSalaryPercConfiguration());
        modelBuilder.ApplyConfiguration(new WorkSalaryStopConfiguration());
        modelBuilder.ApplyConfiguration(new WorkSolfaConfiguration());
        modelBuilder.ApplyConfiguration(new WorkSolfarecieveConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTaskConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTaskDailyConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTimeSheetConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTraingItemConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new WorkTransactionEntryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkUpgradeConfiguration());
        modelBuilder.ApplyConfiguration(new WorkUpgradeHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new WorkUsedEserviceConfiguration());
        modelBuilder.ApplyConfiguration(new WorkVacationConfiguration());
        modelBuilder.ApplyConfiguration(new WorkVacationOrderConfiguration());
        modelBuilder.ApplyConfiguration(new WorkVocConfiguration());
        modelBuilder.ApplyConfiguration(new WorkWorkDayConfiguration());
        modelBuilder.ApplyConfiguration(new WorksPhotoConfiguration());
        modelBuilder.ApplyConfiguration(new YearFinancialConfiguration());
        modelBuilder.ApplyConfiguration(new YearFinancialMasterConfiguration());
        modelBuilder.ApplyConfiguration(new YearFinancialRoleConfiguration());

        base.OnModelCreating(modelBuilder);

        //modelBuilder.ApplyConfigurationsFromAssembly(typeof(DxdbContext).Assembly);
    }

    public async Task BeginTransactionAsync()
    {
        if (_currentTransaction is not null)
        {
            _logger.LogInformation("A transaction with ID {ID} is already created", _currentTransaction.TransactionId);
            return;
        }


        _currentTransaction = await Database.BeginTransactionAsync();
        _logger.LogInformation("A new transaction was created with ID {ID}", _currentTransaction.TransactionId);
    }

    public async Task CommitTransactionAsync()
    {
        if (_currentTransaction is null)
        {
            return;
        }

        _logger.LogInformation("Commiting Transaction {ID}", _currentTransaction.TransactionId);

        await _currentTransaction.CommitAsync();

        _currentTransaction.Dispose();
        _currentTransaction = null;
    }

    public async Task RollbackTransaction()
    {
        if (_currentTransaction is null)
        {
            return;
        }

        _logger.LogDebug("Rolling back Transaction {ID}", _currentTransaction.TransactionId);

        await _currentTransaction.RollbackAsync();

        _currentTransaction.Dispose();
        _currentTransaction = null;
    }

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        var result = await base.SaveChangesAsync(cancellationToken);

        var events = ChangeTracker.Entries<IHasDomainEvent>()
            .Select(x => x.Entity.DomainEvents)
            .SelectMany(x => x)
            .Where(domainEvent => !domainEvent.IsPublished)
            .ToArray();

        foreach (var @event in events)
        {
            @event.IsPublished = true;

            _logger.LogInformation("New domain event {Event}", @event.GetType().Name);

            // Note: If an unhandled exception occurs, all the saved changes will be rolled back
            // by the TransactionBehavior. All the operations related to a domain event finish
            // successfully or none of them do.
            // Reference: https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#what-is-a-domain-event
            await _publisher.Publish(@event);
        }

        return result;
    }

    private static string ConnStringBuilder(string? ip, string? dbName, string? userName, string? password)
    {
        string connString =
            string.Format(
                "Server={0};Database={1};User Id={2};Password={3};MultipleActiveResultSets=true;Integrated Security = false;TrustServerCertificate=True;",
                ip, dbName, userName, password);

        return connString;
    }

    /// <summary>
    /// Extract JWT payload from the HttpContext request
    /// </summary>
    /// <returns><see cref="ClaimsPrincipal"/></returns>
    /// <exception cref="ApplicationException"></exception>
    private ClaimsPrincipal? ExtractJwtPayload()
    {
        var secret = _configuration["Jwt:Key"];
        var issuer = _configuration["Jwt:Issuer"];
        if (secret == null || issuer == null)
            throw new ApplicationException("Jwt's secret and issuer in appsettings are not to be found");

        var token = _httpContextAccessor.HttpContext.Request.Headers[HeaderNames.Authorization].ToString()
            .Replace("Bearer ", "");

        if (string.IsNullOrEmpty(token))
            return null;

        var mySecret = Encoding.UTF8.GetBytes(secret);
        var mySecurityKey = new SymmetricSecurityKey(mySecret);
        var tokenHandler = new JwtSecurityTokenHandler();
        var principal = tokenHandler.ValidateToken(token, new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidIssuer = issuer,
            ValidAudience = issuer,
            IssuerSigningKey = mySecurityKey,
        }, out SecurityToken validatedToken);

        return principal;
    }

    #region DbSets
    public virtual DbSet<AccPayrollItem> AccPayrollItems { get; set; } = null!;
    public virtual DbSet<Account> Accounts { get; set; } = null!;
    public virtual DbSet<AccountMonthly> AccountMonthlies { get; set; } = null!;
    public virtual DbSet<AccountOperand> AccountOperands { get; set; } = null!;
    public virtual DbSet<AccountTransaction> AccountTransactions { get; set; } = null!;
    public virtual DbSet<AccountTransactionEntry> AccountTransactionEntries { get; set; } = null!;
    public virtual DbSet<AccountType> AccountTypes { get; set; } = null!;
    public virtual DbSet<AccountWorkLink> AccountWorkLinks { get; set; } = null!;
    public virtual DbSet<Accountmain> Accountmains { get; set; } = null!;
    public virtual DbSet<AddressCost> AddressCosts { get; set; } = null!;
    public virtual DbSet<Alarm> Alarms { get; set; } = null!;
    public virtual DbSet<AlarmEndUser> AlarmEndUsers { get; set; } = null!;
    public virtual DbSet<AlarmList> AlarmLists { get; set; } = null!;
    public virtual DbSet<AlarmsPostponed> AlarmsPostponeds { get; set; } = null!;
    public virtual DbSet<Appointment> Appointments { get; set; } = null!;
    public virtual DbSet<Archive> Archives { get; set; } = null!;
    public virtual DbSet<ArchiveRel> ArchiveRels { get; set; } = null!;
    public virtual DbSet<Area> Areas { get; set; } = null!;
    public virtual DbSet<AreaLink> AreaLinks { get; set; } = null!;
    public virtual DbSet<Asset> Assets { get; set; } = null!;
    public virtual DbSet<AssetDestroy> AssetDestroys { get; set; } = null!;
    public virtual DbSet<AssetImprove> AssetImproves { get; set; } = null!;
    public virtual DbSet<AssetInRent> AssetInRents { get; set; } = null!;
    public virtual DbSet<AssetPrice> AssetPrices { get; set; } = null!;
    public virtual DbSet<AssetRecalc> AssetRecalcs { get; set; } = null!;
    public virtual DbSet<AssetRent> AssetRents { get; set; } = null!;
    public virtual DbSet<AssetRentAppointment> AssetRentAppointments { get; set; } = null!;
    public virtual DbSet<AssetRentEntry> AssetRentEntries { get; set; } = null!;
    public virtual DbSet<AssetRentLong> AssetRentLongs { get; set; } = null!;
    public virtual DbSet<AssetRentLongInstall> AssetRentLongInstalls { get; set; } = null!;
    public virtual DbSet<AssetRentResource> AssetRentResources { get; set; } = null!;
    public virtual DbSet<AssetReserve> AssetReserves { get; set; } = null!;
    public virtual DbSet<AssetSale> AssetSales { get; set; } = null!;
    public virtual DbSet<AssetSpent> AssetSpents { get; set; } = null!;
    public virtual DbSet<AssetSpentEntry> AssetSpentEntries { get; set; } = null!;
    public virtual DbSet<AttendanceLog> AttendanceLogs { get; set; } = null!;
    public virtual DbSet<Attention> Attentions { get; set; } = null!;
    public virtual DbSet<BadgetItem> BadgetItems { get; set; } = null!;
    public virtual DbSet<BadgetItemsEntry> BadgetItemsEntries { get; set; } = null!;
    public virtual DbSet<BadgetMaster> BadgetMasters { get; set; } = null!;
    public virtual DbSet<BadgetMasterEntry> BadgetMasterEntries { get; set; } = null!;
    public virtual DbSet<BadgetValue> BadgetValues { get; set; } = null!;
    public virtual DbSet<BadgetValueEntry> BadgetValueEntries { get; set; } = null!;
    public virtual DbSet<Balance> Balances { get; set; } = null!;
    public virtual DbSet<Bank> Banks { get; set; } = null!;
    public virtual DbSet<BankDealing> BankDealings { get; set; } = null!;
    public virtual DbSet<BarcodeItem> BarcodeItems { get; set; } = null!;
    public virtual DbSet<BarcodeQr> BarcodeQrs { get; set; } = null!;
    public virtual DbSet<BarcodeScale> BarcodeScales { get; set; } = null!;
    public virtual DbSet<BatchNumber> BatchNumbers { get; set; } = null!;
    public virtual DbSet<BatchNumberDeactivate> BatchNumberDeactivates { get; set; } = null!;
    public virtual DbSet<BatchNumberTransferResult> BatchNumberTransferResults { get; set; } = null!;
    public virtual DbSet<BatchNumberTransferTemp> BatchNumberTransferTemps { get; set; } = null!;
    public virtual DbSet<BillApproval> BillApprovals { get; set; } = null!;
    public virtual DbSet<BillClass> BillClasses { get; set; } = null!;
    public virtual DbSet<BillCustDiscount> BillCustDiscounts { get; set; } = null!;
    public virtual DbSet<BillDealing> BillDealings { get; set; } = null!;
    public virtual DbSet<BillDelete> BillDeletes { get; set; } = null!;
    public virtual DbSet<BillDeleteEntry> BillDeleteEntries { get; set; } = null!;
    public virtual DbSet<BillEdit> BillEdits { get; set; } = null!;
    public virtual DbSet<BillEditEntry> BillEditEntries { get; set; } = null!;
    public virtual DbSet<BillHistory> BillHistories { get; set; } = null!;
    public virtual DbSet<BillItemsSearchView> BillItemsSearchViews { get; set; } = null!;
    public virtual DbSet<BillPause> BillPauses { get; set; } = null!;
    public virtual DbSet<Billnote> Billnotes { get; set; } = null!;
    public virtual DbSet<BranchCycle> BranchCycles { get; set; } = null!;
    public virtual DbSet<BranchCycleEntry> BranchCycleEntries { get; set; } = null!;
    public virtual DbSet<Buy> Buys { get; set; } = null!;
    public virtual DbSet<BuyPhoto> BuyPhotos { get; set; } = null!;
    public virtual DbSet<Buyincome> Buyincomes { get; set; } = null!;
    public virtual DbSet<Buytemp> Buytemps { get; set; } = null!;
    public virtual DbSet<CStage> CStages { get; set; } = null!;
    public virtual DbSet<CStageEntry> CStageEntries { get; set; } = null!;
    public virtual DbSet<CTender> CTenders { get; set; } = null!;
    public virtual DbSet<CTenderAttach> CTenderAttaches { get; set; } = null!;
    public virtual DbSet<CTenderDatum> CTenderData { get; set; } = null!;
    public virtual DbSet<CTenderState> CTenderStates { get; set; } = null!;
    public virtual DbSet<CTenderType> CTenderTypes { get; set; } = null!;
    public virtual DbSet<CalendarEventGenerator> CalendarEventGenerators { get; set; } = null!;
    public virtual DbSet<CashLog> CashLogs { get; set; } = null!;
    public virtual DbSet<CashPaid> CashPaids { get; set; } = null!;
    public virtual DbSet<CashRecieved> CashRecieveds { get; set; } = null!;
    public virtual DbSet<ChequeIn> ChequeIns { get; set; } = null!;
    public virtual DbSet<ChequeInInfo> ChequeInInfos { get; set; } = null!;
    public virtual DbSet<ChequeInbank> ChequeInbanks { get; set; } = null!;
    public virtual DbSet<ChequeInbankDone> ChequeInbankDones { get; set; } = null!;
    public virtual DbSet<ChequeIncust> ChequeIncusts { get; set; } = null!;
    public virtual DbSet<ChequeIncustReturn> ChequeIncustReturns { get; set; } = null!;
    public virtual DbSet<ChequeInreturn> ChequeInreturns { get; set; } = null!;
    public virtual DbSet<ChequeOpeningOut> ChequeOpeningOuts { get; set; } = null!;
    public virtual DbSet<ChequeOut> ChequeOuts { get; set; } = null!;
    public virtual DbSet<ChequeOutDone> ChequeOutDones { get; set; } = null!;
    public virtual DbSet<ChequeOutInfo> ChequeOutInfos { get; set; } = null!;
    public virtual DbSet<ChequeOutReturned> ChequeOutReturneds { get; set; } = null!;
    public virtual DbSet<CloseUser> CloseUsers { get; set; } = null!;
    public virtual DbSet<ColName> ColNames { get; set; } = null!;
    public virtual DbSet<Company> Companies { get; set; } = null!;
    public virtual DbSet<CompanyActivity> CompanyActivities { get; set; } = null!;
    public virtual DbSet<CompanyBranch> CompanyBranches { get; set; } = null!;
    public virtual DbSet<CompanyTaxToken> CompanyTaxTokens { get; set; } = null!;
    public virtual DbSet<ContCashpaid> ContCashpaids { get; set; } = null!;
    public virtual DbSet<ContCashrecieve> ContCashrecieves { get; set; } = null!;
    public virtual DbSet<ContSpent> ContSpents { get; set; } = null!;
    public virtual DbSet<Contract> Contracts { get; set; } = null!;
    public virtual DbSet<ContractSub> ContractSubs { get; set; } = null!;
    public virtual DbSet<ContractSubitem> ContractSubitems { get; set; } = null!;
    public virtual DbSet<Contractitem> Contractitems { get; set; } = null!;
    public virtual DbSet<CostCenter> CostCenters { get; set; } = null!;
    public virtual DbSet<CostCenterEntry> CostCenterEntries { get; set; } = null!;
    public virtual DbSet<CostCenterEstimate> CostCenterEstimates { get; set; } = null!;
    public virtual DbSet<CostCenterGroup> CostCenterGroups { get; set; } = null!;
    public virtual DbSet<CostCenterItem> CostCenterItems { get; set; } = null!;
    public virtual DbSet<Cpu> Cpus { get; set; } = null!;
    public virtual DbSet<CrmPotCategory> CrmPotCategories { get; set; } = null!;
    public virtual DbSet<CrmPotPriority> CrmPotPriorities { get; set; } = null!;
    public virtual DbSet<CrmPotStatistic> CrmPotStatistics { get; set; } = null!;
    public virtual DbSet<CrmPreVisit> CrmPreVisits { get; set; } = null!;
    public virtual DbSet<Currency> Currencies { get; set; } = null!;
    public virtual DbSet<CurrencyDiff> CurrencyDiffs { get; set; } = null!;
    public virtual DbSet<CurrencyDiffEntry> CurrencyDiffEntries { get; set; } = null!;
    public virtual DbSet<CurrencyPurchase> CurrencyPurchases { get; set; } = null!;
    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; } = null!;
    public virtual DbSet<CurrencySale> CurrencySales { get; set; } = null!;
    public virtual DbSet<CurrencyTable> CurrencyTables { get; set; } = null!;
    public virtual DbSet<CurrentPc> CurrentPcs { get; set; } = null!;
    public virtual DbSet<Cust> Custs { get; set; } = null!;
    public virtual DbSet<CustAddress> CustAddresses { get; set; } = null!;
    public virtual DbSet<CustBoune> CustBounes { get; set; } = null!;
    public virtual DbSet<CustCall> CustCalls { get; set; } = null!;
    public virtual DbSet<CustContract> CustContracts { get; set; } = null!;
    public virtual DbSet<CustContractEntry> CustContractEntries { get; set; } = null!;
    public virtual DbSet<CustContractLog> CustContractLogs { get; set; } = null!;
    public virtual DbSet<CustConvert> CustConverts { get; set; } = null!;
    public virtual DbSet<CustDailyBalance> CustDailyBalances { get; set; } = null!;
    public virtual DbSet<CustDealing> CustDealings { get; set; } = null!;
    public virtual DbSet<CustDefault> CustDefaults { get; set; } = null!;
    public virtual DbSet<CustDiscount> CustDiscounts { get; set; } = null!;
    public virtual DbSet<CustDonation> CustDonations { get; set; } = null!;
    public virtual DbSet<CustField> CustFields { get; set; } = null!;
    public virtual DbSet<CustImage> CustImages { get; set; } = null!;
    public virtual DbSet<CustInfo> CustInfos { get; set; } = null!;
    public virtual DbSet<CustInstallment> CustInstallments { get; set; } = null!;
    public virtual DbSet<CustInstallmentSlice> CustInstallmentSlices { get; set; } = null!;
    public virtual DbSet<CustNet> CustNets { get; set; } = null!;
    public virtual DbSet<CustNote> CustNotes { get; set; } = null!;
    public virtual DbSet<CustOpening> CustOpenings { get; set; } = null!;
    public virtual DbSet<CustOpeningEntry> CustOpeningEntries { get; set; } = null!;
    public virtual DbSet<CustOverview> CustOverviews { get; set; } = null!;
    public virtual DbSet<CustPatient> CustPatients { get; set; } = null!;
    public virtual DbSet<CustRating> CustRatings { get; set; } = null!;
    public virtual DbSet<CustRatingName> CustRatingNames { get; set; } = null!;
    public virtual DbSet<CustRatingSystem> CustRatingSystems { get; set; } = null!;
    public virtual DbSet<CustType> CustTypes { get; set; } = null!;
    public virtual DbSet<CustomerDropDown> CustomerDropDowns { get; set; } = null!;
    public virtual DbSet<Cycle> Cycles { get; set; } = null!;
    public virtual DbSet<CyclePermission> CyclePermissions { get; set; } = null!;
    public virtual DbSet<DailyAssetExpense> DailyAssetExpenses { get; set; } = null!;
    public virtual DbSet<DailyBank> DailyBanks { get; set; } = null!;
    public virtual DbSet<DailyBatchNumber> DailyBatchNumbers { get; set; } = null!;
    public virtual DbSet<DailyCashPaid> DailyCashPaids { get; set; } = null!;
    public virtual DbSet<DailyCashRecieved> DailyCashRecieveds { get; set; } = null!;
    public virtual DbSet<DailyCharge> DailyCharges { get; set; } = null!;
    public virtual DbSet<DailyCheckRecieved> DailyCheckRecieveds { get; set; } = null!;
    public virtual DbSet<DailyCheckpaid> DailyCheckpaids { get; set; } = null!;
    public virtual DbSet<DailyChequeIn> DailyChequeIns { get; set; } = null!;
    public virtual DbSet<DailyChequeOut> DailyChequeOuts { get; set; } = null!;
    public virtual DbSet<DailyCostCenter> DailyCostCenters { get; set; } = null!;
    public virtual DbSet<DailyCustAging> DailyCustAgings { get; set; } = null!;
    public virtual DbSet<DailyCustAgingEntry> DailyCustAgingEntries { get; set; } = null!;
    public virtual DbSet<DailyCustService> DailyCustServices { get; set; } = null!;
    public virtual DbSet<DailyDate> DailyDates { get; set; } = null!;
    public virtual DbSet<DailyEservice> DailyEservices { get; set; } = null!;
    public virtual DbSet<DailyFixedAsset> DailyFixedAssets { get; set; } = null!;
    public virtual DbSet<DailyInsurance> DailyInsurances { get; set; } = null!;
    public virtual DbSet<DailyInvoiceExpense> DailyInvoiceExpenses { get; set; } = null!;
    public virtual DbSet<DailyItemCost> DailyItemCosts { get; set; } = null!;
    public virtual DbSet<DailyItemDiscount> DailyItemDiscounts { get; set; } = null!;
    public virtual DbSet<DailyItemExtra> DailyItemExtras { get; set; } = null!;
    public virtual DbSet<DailyKind> DailyKinds { get; set; } = null!;
    public virtual DbSet<DailyMaintenance> DailyMaintenances { get; set; } = null!;
    public virtual DbSet<DailyPledge> DailyPledges { get; set; } = null!;
    public virtual DbSet<DailyPoint> DailyPoints { get; set; } = null!;
    public virtual DbSet<DailyPotenial> DailyPotenials { get; set; } = null!;
    public virtual DbSet<DailyQuotum> DailyQuota { get; set; } = null!;
    public virtual DbSet<DailyRent> DailyRents { get; set; } = null!;
    public virtual DbSet<DailySalary> DailySalaries { get; set; } = null!;
    public virtual DbSet<DailySerial> DailySerials { get; set; } = null!;
    public virtual DbSet<DailySm> DailySms { get; set; } = null!;
    public virtual DbSet<DailyStorage> DailyStorages { get; set; } = null!;
    public virtual DbSet<DailyTax> DailyTaxes { get; set; } = null!;
    public virtual DbSet<DailyVisa> DailyVisas { get; set; } = null!;
    public virtual DbSet<DailyWorkPledge> DailyWorkPledges { get; set; } = null!;
    public virtual DbSet<Dailyasset> Dailyassets { get; set; } = null!;
    public virtual DbSet<Dailycontract> Dailycontracts { get; set; } = null!;
    public virtual DbSet<Dailycurrency> Dailycurrencies { get; set; } = null!;
    public virtual DbSet<Dailycust> Dailycusts { get; set; } = null!;
    public virtual DbSet<Dailydat> Dailydats { get; set; } = null!;
    public virtual DbSet<Dailyga> Dailygas { get; set; } = null!;
    public virtual DbSet<Dailyop> Dailyops { get; set; } = null!;
    public virtual DbSet<Dailyuser> Dailyusers { get; set; } = null!;
    public virtual DbSet<Dailywork> Dailyworks { get; set; } = null!;
    public virtual DbSet<DailyworkHi> DailyworkHis { get; set; } = null!;
    public virtual DbSet<Dailyworkpercent> Dailyworkpercents { get; set; } = null!;
    public virtual DbSet<DailyworkpercentTemp> DailyworkpercentTemps { get; set; } = null!;
    public virtual DbSet<Dbdatum> Dbdata { get; set; } = null!;
    public virtual DbSet<Dbversion> Dbversions { get; set; } = null!;
    public virtual DbSet<Dealing> Dealings { get; set; } = null!;
    public virtual DbSet<DealingTableName> DealingTableNames { get; set; } = null!;
    public virtual DbSet<DefaultFilterPeriod> DefaultFilterPeriods { get; set; } = null!;
    public virtual DbSet<DeliveryMan> DeliveryMen { get; set; } = null!;
    public virtual DbSet<DiscountAccelerate> DiscountAccelerates { get; set; } = null!;
    public virtual DbSet<DiscountCash> DiscountCashes { get; set; } = null!;
    public virtual DbSet<DiscountCoupon> DiscountCoupons { get; set; } = null!;
    public virtual DbSet<DiscountCouponLog> DiscountCouponLogs { get; set; } = null!;
    public virtual DbSet<DiscountGroup> DiscountGroups { get; set; } = null!;
    public virtual DbSet<DiscountItem> DiscountItems { get; set; } = null!;
    public virtual DbSet<DiscountItemItem> DiscountItemItems { get; set; } = null!;
    public virtual DbSet<DiscountQty> DiscountQties { get; set; } = null!;
    public virtual DbSet<DiscountQtyItem> DiscountQtyItems { get; set; } = null!;
    public virtual DbSet<DiscountQtySlice> DiscountQtySlices { get; set; } = null!;
    public virtual DbSet<DiscountShipping> DiscountShippings { get; set; } = null!;
    public virtual DbSet<DiscountTrade> DiscountTrades { get; set; } = null!;
    public virtual DbSet<DiscountTradePermission> DiscountTradePermissions { get; set; } = null!;
    public virtual DbSet<DropDownItemStore> DropDownItemStores { get; set; } = null!;
    public virtual DbSet<EditHistory> EditHistories { get; set; } = null!;
    public virtual DbSet<EgyptTaxMain> EgyptTaxMains { get; set; } = null!;
    public virtual DbSet<EinvoiceMapping> EinvoiceMappings { get; set; } = null!;
    public virtual DbSet<EmpDailyPayroll> EmpDailyPayrolls { get; set; } = null!;
    public virtual DbSet<EmplContractTemplate> EmplContractTemplates { get; set; } = null!;
    public virtual DbSet<EmplHiring> EmplHirings { get; set; } = null!;
    public virtual DbSet<EmplLoan> EmplLoans { get; set; } = null!;
    public virtual DbSet<EmplLoanEntry> EmplLoanEntries { get; set; } = null!;
    public virtual DbSet<EmplSalariesSlice> EmplSalariesSlices { get; set; } = null!;
    public virtual DbSet<EmplSalariesSliceEntry> EmplSalariesSliceEntries { get; set; } = null!;
    public virtual DbSet<EmplSalaryCalc> EmplSalaryCalcs { get; set; } = null!;
    public virtual DbSet<EmplSalaryCalcEntry> EmplSalaryCalcEntries { get; set; } = null!;
    public virtual DbSet<EmplSalaryCalcEntryAccount> EmplSalaryCalcEntryAccounts { get; set; } = null!;
    public virtual DbSet<EmplSalaryPay> EmplSalaryPays { get; set; } = null!;
    public virtual DbSet<EmplSalaryPayEntry> EmplSalaryPayEntries { get; set; } = null!;
    public virtual DbSet<EmplSalaryPeriod> EmplSalaryPeriods { get; set; } = null!;
    public virtual DbSet<EmplSkill> EmplSkills { get; set; } = null!;
    public virtual DbSet<EmplTransaction> EmplTransactions { get; set; } = null!;
    public virtual DbSet<EmplTransactionEntry> EmplTransactionEntries { get; set; } = null!;
    public virtual DbSet<EmplWorkShift> EmplWorkShifts { get; set; } = null!;
    public virtual DbSet<Employee> Employees { get; set; } = null!;
    public virtual DbSet<Estimate> Estimates { get; set; } = null!;
    public virtual DbSet<EstimateDaily> EstimateDailies { get; set; } = null!;
    public virtual DbSet<EstimateDealing> EstimateDealings { get; set; } = null!;
    public virtual DbSet<EstimateDistribute> EstimateDistributes { get; set; } = null!;
    public virtual DbSet<EstimateEntry> EstimateEntries { get; set; } = null!;
    public virtual DbSet<EstimateItem> EstimateItems { get; set; } = null!;
    public virtual DbSet<EstimateShip> EstimateShips { get; set; } = null!;
    public virtual DbSet<EstimateShipEntry> EstimateShipEntries { get; set; } = null!;
    public virtual DbSet<EstimateShipItem> EstimateShipItems { get; set; } = null!;
    public virtual DbSet<EstimateShippingCompany> EstimateShippingCompanies { get; set; } = null!;
    public virtual DbSet<EstimateSpentItem> EstimateSpentItems { get; set; } = null!;
    public virtual DbSet<EstimateType> EstimateTypes { get; set; } = null!;
    public virtual DbSet<Eticket> Etickets { get; set; } = null!;
    public virtual DbSet<EticketCustomer> EticketCustomers { get; set; } = null!;
    public virtual DbSet<EticketDemanding> EticketDemandings { get; set; } = null!;
    public virtual DbSet<EticketTemp> EticketTemps { get; set; } = null!;
    public virtual DbSet<EticketUser> EticketUsers { get; set; } = null!;
    public virtual DbSet<Expense> Expenses { get; set; } = null!;
    public virtual DbSet<ExpensesBranch> ExpensesBranches { get; set; } = null!;
    public virtual DbSet<ExpensesClass> ExpensesClasses { get; set; } = null!;
    public virtual DbSet<ExpensesEntry> ExpensesEntries { get; set; } = null!;
    public virtual DbSet<ExpensesEntryItem> ExpensesEntryItems { get; set; } = null!;
    public virtual DbSet<ExpensesItem> ExpensesItems { get; set; } = null!;
    public virtual DbSet<ExpensesItemsEntry> ExpensesItemsEntries { get; set; } = null!;
    public virtual DbSet<Exportstock> Exportstocks { get; set; } = null!;
    public virtual DbSet<ExtraItem> ExtraItems { get; set; } = null!;
    public virtual DbSet<ExtraItemEntry> ExtraItemEntries { get; set; } = null!;
    public virtual DbSet<FactoreCome> FactoreComes { get; set; } = null!;
    public virtual DbSet<FactoreGo> FactoreGos { get; set; } = null!;
    public virtual DbSet<FactoreIn> FactoreIns { get; set; } = null!;
    public virtual DbSet<FactoreInEntry> FactoreInEntries { get; set; } = null!;
    public virtual DbSet<FactoreItemPrice> FactoreItemPrices { get; set; } = null!;
    public virtual DbSet<FactoreMachine> FactoreMachines { get; set; } = null!;
    public virtual DbSet<FactoreOut> FactoreOuts { get; set; } = null!;
    public virtual DbSet<FactoreOutEntry> FactoreOutEntries { get; set; } = null!;
    public virtual DbSet<FactoreStage> FactoreStages { get; set; } = null!;
    public virtual DbSet<FactoreStore> FactoreStores { get; set; } = null!;
    public virtual DbSet<Favorite> Favorites { get; set; } = null!;
    public virtual DbSet<Favoriteform> Favoriteforms { get; set; } = null!;
    public virtual DbSet<FinalDatum> FinalData { get; set; } = null!;
    public virtual DbSet<FinalDayReport> FinalDayReports { get; set; } = null!;
    public virtual DbSet<FixedAsset> FixedAssets { get; set; } = null!;
    public virtual DbSet<FixedAssetArea> FixedAssetAreas { get; set; } = null!;
    public virtual DbSet<FixedAssetAreaFile> FixedAssetAreaFiles { get; set; } = null!;
    public virtual DbSet<FixedAssetAreaGroup> FixedAssetAreaGroups { get; set; } = null!;
    public virtual DbSet<FixedAssetBranchTransfer> FixedAssetBranchTransfers { get; set; } = null!;
    public virtual DbSet<FixedAssetCategory> FixedAssetCategories { get; set; } = null!;
    public virtual DbSet<FixedAssetCategoryFile> FixedAssetCategoryFiles { get; set; } = null!;
    public virtual DbSet<FixedAssetCategoryGroup> FixedAssetCategoryGroups { get; set; } = null!;
    public virtual DbSet<FixedAssetDailyDeprecate> FixedAssetDailyDeprecates { get; set; } = null!;
    public virtual DbSet<FixedAssetDailyDeprecateFile> FixedAssetDailyDeprecateFiles { get; set; } = null!;
    public virtual DbSet<FixedAssetDailyDeprecateGroup> FixedAssetDailyDeprecateGroups { get; set; } = null!;
    public virtual DbSet<FixedAssetDeprecationMethodFile> FixedAssetDeprecationMethodFiles { get; set; } = null!;
    public virtual DbSet<FixedAssetDeprecationMethodGroup> FixedAssetDeprecationMethodGroups { get; set; } = null!;
    public virtual DbSet<FixedAssetDepreciation> FixedAssetDepreciations { get; set; } = null!;
    public virtual DbSet<FixedAssetExpense> FixedAssetExpenses { get; set; } = null!;
    public virtual DbSet<FixedAssetFile> FixedAssetFiles { get; set; } = null!;
    public virtual DbSet<FixedAssetGroup> FixedAssetGroups { get; set; } = null!;
    public virtual DbSet<FixedAssetMasterDepreciation> FixedAssetMasterDepreciations { get; set; } = null!;
    public virtual DbSet<FixedAssetPremium> FixedAssetPremia { get; set; } = null!;
    public virtual DbSet<FixedAssetPurchase> FixedAssetPurchases { get; set; } = null!;
    public virtual DbSet<FixedAssetPurchaseEntry> FixedAssetPurchaseEntries { get; set; } = null!;
    public virtual DbSet<FixedAssetRecalc> FixedAssetRecalcs { get; set; } = null!;
    public virtual DbSet<FixedAssetRentCollect> FixedAssetRentCollects { get; set; } = null!;
    public virtual DbSet<FixedAssetRentCust> FixedAssetRentCusts { get; set; } = null!;
    public virtual DbSet<FixedAssetRentCustEntry> FixedAssetRentCustEntries { get; set; } = null!;
    public virtual DbSet<FixedAssetRentMethod> FixedAssetRentMethods { get; set; } = null!;
    public virtual DbSet<FixedAssetRentOpt> FixedAssetRentOpts { get; set; } = null!;
    public virtual DbSet<FixedAssetRentOptEntry> FixedAssetRentOptEntries { get; set; } = null!;
    public virtual DbSet<FixedAssetSale> FixedAssetSales { get; set; } = null!;
    public virtual DbSet<FixedAssetSaleEntry> FixedAssetSaleEntries { get; set; } = null!;
    public virtual DbSet<FixedAssetScrap> FixedAssetScraps { get; set; } = null!;
    public virtual DbSet<FixedAssetsCategory> FixedAssetsCategories { get; set; } = null!;
    public virtual DbSet<FixedAssetsMain> FixedAssetsMains { get; set; } = null!;
    public virtual DbSet<FoodMeal> FoodMeals { get; set; } = null!;
    public virtual DbSet<Foodlayout> Foodlayouts { get; set; } = null!;
    public virtual DbSet<Foodtemp> Foodtemps { get; set; } = null!;
    public virtual DbSet<Frmlayout> Frmlayouts { get; set; } = null!;
    public virtual DbSet<FuelType> FuelTypes { get; set; } = null!;
    public virtual DbSet<GetCashPaid> GetCashPaids { get; set; } = null!;
    public virtual DbSet<GetCashRecieved> GetCashRecieveds { get; set; } = null!;
    public virtual DbSet<GetExpense> GetExpenses { get; set; } = null!;
    public virtual DbSet<GetStorageSendMoney> GetStorageSendMoneys { get; set; } = null!;
    public virtual DbSet<GetStorageTransform> GetStorageTransforms { get; set; } = null!;
    public virtual DbSet<GlIncome> GlIncomes { get; set; } = null!;
    public virtual DbSet<Grouplayout> Grouplayouts { get; set; } = null!;
    public virtual DbSet<HrAllowance> HrAllowances { get; set; } = null!;
    public virtual DbSet<HrAsset> HrAssets { get; set; } = null!;
    public virtual DbSet<HrAttendPolicy> HrAttendPolicies { get; set; } = null!;
    public virtual DbSet<HrAttendPolicyEntry> HrAttendPolicyEntries { get; set; } = null!;
    public virtual DbSet<HrAttendanceSetting> HrAttendanceSettings { get; set; } = null!;
    public virtual DbSet<HrContractTemplate> HrContractTemplates { get; set; } = null!;
    public virtual DbSet<HrContractType> HrContractTypes { get; set; } = null!;
    public virtual DbSet<HrCreditCard> HrCreditCards { get; set; } = null!;
    public virtual DbSet<HrDocument> HrDocuments { get; set; } = null!;
    public virtual DbSet<HrExcelSetting> HrExcelSettings { get; set; } = null!;
    public virtual DbSet<HrExperience> HrExperiences { get; set; } = null!;
    public virtual DbSet<HrFingerPrintSetting> HrFingerPrintSettings { get; set; } = null!;
    public virtual DbSet<HrIndex> HrIndices { get; set; } = null!;
    public virtual DbSet<HrInsuranceSetting> HrInsuranceSettings { get; set; } = null!;
    public virtual DbSet<HrJobInfo> HrJobInfos { get; set; } = null!;
    public virtual DbSet<HrLoanItem> HrLoanItems { get; set; } = null!;
    public virtual DbSet<HrLoanedAsset> HrLoanedAssets { get; set; } = null!;
    public virtual DbSet<HrPayrollSchedule> HrPayrollSchedules { get; set; } = null!;
    public virtual DbSet<HrProctionPerc> HrProctionPercs { get; set; } = null!;
    public virtual DbSet<HrProctionPercEntry> HrProctionPercEntries { get; set; } = null!;
    public virtual DbSet<HrSalariesEquation> HrSalariesEquations { get; set; } = null!;
    public virtual DbSet<HrSalariesGroup> HrSalariesGroups { get; set; } = null!;
    public virtual DbSet<HrSalary> HrSalaries { get; set; } = null!;
    public virtual DbSet<HrSetting> HrSettings { get; set; } = null!;
    public virtual DbSet<HrSkill> HrSkills { get; set; } = null!;
    public virtual DbSet<HrTask> HrTasks { get; set; } = null!;
    public virtual DbSet<HrTaxSetting> HrTaxSettings { get; set; } = null!;
    public virtual DbSet<HrTaxSettingsEntry> HrTaxSettingsEntries { get; set; } = null!;
    public virtual DbSet<HrTimeOff> HrTimeOffs { get; set; } = null!;
    public virtual DbSet<HrTimeOffAgendaEntry> HrTimeOffAgendaEntries { get; set; } = null!;
    public virtual DbSet<HrTimeOffAgendum> HrTimeOffAgenda { get; set; } = null!;
    public virtual DbSet<HrTimeOffEntry> HrTimeOffEntries { get; set; } = null!;
    public virtual DbSet<HrTimeOffPolicy> HrTimeOffPolicies { get; set; } = null!;
    public virtual DbSet<HrTimeOffPolicyEntry> HrTimeOffPolicyEntries { get; set; } = null!;
    public virtual DbSet<HrTimeOffType> HrTimeOffTypes { get; set; } = null!;
    public virtual DbSet<HrTrainingCourse> HrTrainingCourses { get; set; } = null!;
    public virtual DbSet<HrVacationType> HrVacationTypes { get; set; } = null!;
    public virtual DbSet<HrWorkShift> HrWorkShifts { get; set; } = null!;
    public virtual DbSet<HrWorkTime> HrWorkTimes { get; set; } = null!;
    public virtual DbSet<HrWorkTimeEntry> HrWorkTimeEntries { get; set; } = null!;
    public virtual DbSet<ImportCost> ImportCosts { get; set; } = null!;
    public virtual DbSet<Importorder> Importorders { get; set; } = null!;
    public virtual DbSet<Income> Incomes { get; set; } = null!;
    public virtual DbSet<Income1> Incomes1 { get; set; } = null!;
    public virtual DbSet<IncomeItem> IncomeItems { get; set; } = null!;
    public virtual DbSet<IncomeItemsBranch> IncomeItemsBranches { get; set; } = null!;
    public virtual DbSet<IncomesEntry> IncomesEntries { get; set; } = null!;
    public virtual DbSet<Installment> Installments { get; set; } = null!;
    public virtual DbSet<InstallmentEntry> InstallmentEntries { get; set; } = null!;
    public virtual DbSet<InstallmentInvoice> InstallmentInvoices { get; set; } = null!;
    public virtual DbSet<InstallmentLog> InstallmentLogs { get; set; } = null!;
    public virtual DbSet<InstallmentSetting> InstallmentSettings { get; set; } = null!;
    public virtual DbSet<InsurancesCompany> InsurancesCompanies { get; set; } = null!;
    public virtual DbSet<InsurancesItem> InsurancesItems { get; set; } = null!;
    public virtual DbSet<InsurancesItemsEntry> InsurancesItemsEntries { get; set; } = null!;
    public virtual DbSet<InsurancesPercent> InsurancesPercents { get; set; } = null!;
    public virtual DbSet<InvTypeStatus> InvTypeStatuses { get; set; } = null!;
    public virtual DbSet<Invoice> Invoices { get; set; } = null!;
    public virtual DbSet<InvoiceDepartment> InvoiceDepartments { get; set; } = null!;
    public virtual DbSet<InvoiceDepartmentEntry> InvoiceDepartmentEntries { get; set; } = null!;
    public virtual DbSet<InvoiceExpense> InvoiceExpenses { get; set; } = null!;
    public virtual DbSet<InvoiceExpensesLog> InvoiceExpensesLogs { get; set; } = null!;
    public virtual DbSet<InvoiceInstallment> InvoiceInstallments { get; set; } = null!;
    public virtual DbSet<InvoiceMustSave> InvoiceMustSaves { get; set; } = null!;
    public virtual DbSet<InvoicePrefix> InvoicePrefixes { get; set; } = null!;
    public virtual DbSet<InvoicePrefixList> InvoicePrefixLists { get; set; } = null!;
    public virtual DbSet<InvoicesSetting> InvoicesSettings { get; set; } = null!;
    public virtual DbSet<ItemAdjustment> ItemAdjustments { get; set; } = null!;
    public virtual DbSet<ItemColor> ItemColors { get; set; } = null!;
    public virtual DbSet<ItemRepaireDone> ItemRepaireDones { get; set; } = null!;
    public virtual DbSet<ItemRepaireMenu> ItemRepaireMenus { get; set; } = null!;
    public virtual DbSet<ItemRepaireTalab> ItemRepaireTalabs { get; set; } = null!;
    public virtual DbSet<ItemReview> ItemReviews { get; set; } = null!;
    public virtual DbSet<ItemSearch> ItemSearches { get; set; } = null!;
    public virtual DbSet<ItemSize> ItemSizes { get; set; } = null!;
    public virtual DbSet<ItemStyleSearch> ItemStyleSearches { get; set; } = null!;
    public virtual DbSet<ItemUnite> ItemUnites { get; set; } = null!;
    public virtual DbSet<ItemsRequest> ItemsRequests { get; set; } = null!;
    public virtual DbSet<ItemsRequestEntry> ItemsRequestEntries { get; set; } = null!;
    public virtual DbSet<ItemsRequestLog> ItemsRequestLogs { get; set; } = null!;
    public virtual DbSet<Kind> Kinds { get; set; } = null!;
    public virtual DbSet<KindActiveSubJect> KindActiveSubJects { get; set; } = null!;
    public virtual DbSet<KindAntiUsage> KindAntiUsages { get; set; } = null!;
    public virtual DbSet<KindAssembly> KindAssemblies { get; set; } = null!;
    public virtual DbSet<KindBoune> KindBounes { get; set; } = null!;
    public virtual DbSet<KindBounesEntry> KindBounesEntries { get; set; } = null!;
    public virtual DbSet<KindBounesItem> KindBounesItems { get; set; } = null!;
    public virtual DbSet<KindColor> KindColors { get; set; } = null!;
    public virtual DbSet<KindCreator> KindCreators { get; set; } = null!;
    public virtual DbSet<KindDefault> KindDefaults { get; set; } = null!;
    public virtual DbSet<KindDescription> KindDescriptions { get; set; } = null!;
    public virtual DbSet<KindDrug> KindDrugs { get; set; } = null!;
    public virtual DbSet<KindEquation> KindEquations { get; set; } = null!;
    public virtual DbSet<KindExpr> KindExprs { get; set; } = null!;
    public virtual DbSet<KindExprEdit> KindExprEdits { get; set; } = null!;
    public virtual DbSet<KindFree> KindFrees { get; set; } = null!;
    public virtual DbSet<KindGeneric> KindGenerics { get; set; } = null!;
    public virtual DbSet<KindGpc> KindGpcs { get; set; } = null!;
    public virtual DbSet<KindGroupDefault> KindGroupDefaults { get; set; } = null!;
    public virtual DbSet<KindGroupEquation> KindGroupEquations { get; set; } = null!;
    public virtual DbSet<KindImage> KindImages { get; set; } = null!;
    public virtual DbSet<KindLocal> KindLocals { get; set; } = null!;
    public virtual DbSet<KindNote> KindNotes { get; set; } = null!;
    public virtual DbSet<KindOpt> KindOpts { get; set; } = null!;
    public virtual DbSet<KindOrder> KindOrders { get; set; } = null!;
    public virtual DbSet<KindPick> KindPicks { get; set; } = null!;
    public virtual DbSet<KindPriceEquation> KindPriceEquations { get; set; } = null!;
    public virtual DbSet<KindQoutaEntry> KindQoutaEntries { get; set; } = null!;
    public virtual DbSet<KindQoutum> KindQouta { get; set; } = null!;
    public virtual DbSet<KindScientific> KindScientifics { get; set; } = null!;
    public virtual DbSet<KindSize> KindSizes { get; set; } = null!;
    public virtual DbSet<KindStock> KindStocks { get; set; } = null!;
    public virtual DbSet<KindStorageCondition> KindStorageConditions { get; set; } = null!;
    public virtual DbSet<KindStyleColor> KindStyleColors { get; set; } = null!;
    public virtual DbSet<KindStyleSize> KindStyleSizes { get; set; } = null!;
    public virtual DbSet<KindTag> KindTags { get; set; } = null!;
    public virtual DbSet<KindUnite> KindUnites { get; set; } = null!;
    public virtual DbSet<KindUsage> KindUsages { get; set; } = null!;
    public virtual DbSet<KindUseWay> KindUseWays { get; set; } = null!;
    public virtual DbSet<Lang> Langs { get; set; } = null!;
    public virtual DbSet<Language> Languages { get; set; } = null!;
    public virtual DbSet<Layout> Layouts { get; set; } = null!;
    public virtual DbSet<LogHistory> LogHistories { get; set; } = null!;
    public virtual DbSet<MailSettng> MailSettngs { get; set; } = null!;
    public virtual DbSet<MailTemplate> MailTemplates { get; set; } = null!;
    public virtual DbSet<Maindaily> Maindailies { get; set; } = null!;
    public virtual DbSet<Maintenance> Maintenances { get; set; } = null!;
    public virtual DbSet<MaintenanceAccessoriesEntry> MaintenanceAccessoriesEntries { get; set; } = null!;
    public virtual DbSet<MaintenanceAccessory> MaintenanceAccessories { get; set; } = null!;
    public virtual DbSet<MaintenanceCategory> MaintenanceCategories { get; set; } = null!;
    public virtual DbSet<MaintenanceDamage> MaintenanceDamages { get; set; } = null!;
    public virtual DbSet<MaintenanceDelivery> MaintenanceDeliveries { get; set; } = null!;
    public virtual DbSet<MaintenanceEntry> MaintenanceEntries { get; set; } = null!;
    public virtual DbSet<MaintenanceExtra> MaintenanceExtras { get; set; } = null!;
    public virtual DbSet<MaintenanceItem> MaintenanceItems { get; set; } = null!;
    public virtual DbSet<MaintenanceItemsEntry> MaintenanceItemsEntries { get; set; } = null!;
    public virtual DbSet<MaintenanceTask> MaintenanceTasks { get; set; } = null!;
    public virtual DbSet<Menu> Menus { get; set; } = null!;
    public virtual DbSet<MenuHideFrom> MenuHideFroms { get; set; } = null!;
    public virtual DbSet<MenuHideReport> MenuHideReports { get; set; } = null!;
    public virtual DbSet<MenuTileHome> MenuTileHomes { get; set; } = null!;
    public virtual DbSet<Mostvisited> Mostvisiteds { get; set; } = null!;
    public virtual DbSet<Motalaba> Motalabas { get; set; } = null!;
    public virtual DbSet<MyTable> MyTables { get; set; } = null!;
    public virtual DbSet<Nethistory> Nethistories { get; set; } = null!;
    public virtual DbSet<NoteQuick> NoteQuicks { get; set; } = null!;
    public virtual DbSet<OnlineUser> OnlineUsers { get; set; } = null!;
    public virtual DbSet<OpOrder> OpOrders { get; set; } = null!;
    public virtual DbSet<OrderSaleQty> OrderSaleQties { get; set; } = null!;
    public virtual DbSet<Owner> Owners { get; set; } = null!;
    public virtual DbSet<PaidBill> PaidBills { get; set; } = null!;
    public virtual DbSet<Partner> Partners { get; set; } = null!;
    public virtual DbSet<PartnerGroup> PartnerGroups { get; set; } = null!;
    public virtual DbSet<Patient> Patients { get; set; } = null!;
    public virtual DbSet<PaymentLog> PaymentLogs { get; set; } = null!;
    public virtual DbSet<PaymentTerm> PaymentTerms { get; set; } = null!;
    public virtual DbSet<Phoneindex> Phoneindices { get; set; } = null!;
    public virtual DbSet<Pledge> Pledges { get; set; } = null!;
    public virtual DbSet<Plugin> Plugins { get; set; } = null!;
    public virtual DbSet<PointCust> PointCusts { get; set; } = null!;
    public virtual DbSet<PointCustomer> PointCustomers { get; set; } = null!;
    public virtual DbSet<PointPatnerPay> PointPatnerPays { get; set; } = null!;
    public virtual DbSet<PointProperty> PointProperties { get; set; } = null!;
    public virtual DbSet<PointScenario> PointScenarios { get; set; } = null!;
    public virtual DbSet<PointsCard> PointsCards { get; set; } = null!;
    public virtual DbSet<PointsCardSetting> PointsCardSettings { get; set; } = null!;
    public virtual DbSet<PointsSetting> PointsSettings { get; set; } = null!;
    public virtual DbSet<PointsSlice> PointsSlices { get; set; } = null!;
    public virtual DbSet<PosHall> PosHalls { get; set; } = null!;
    public virtual DbSet<PosHallEntry> PosHallEntries { get; set; } = null!;
    public virtual DbSet<PosPendingDelivery> PosPendingDeliveries { get; set; } = null!;
    public virtual DbSet<PosPendingDeliveryEntry> PosPendingDeliveryEntries { get; set; } = null!;
    public virtual DbSet<PosSale> PosSales { get; set; } = null!;
    public virtual DbSet<PosSaleEntry> PosSaleEntries { get; set; } = null!;
    public virtual DbSet<PotCall> PotCalls { get; set; } = null!;
    public virtual DbSet<PotDeleteLog> PotDeleteLogs { get; set; } = null!;
    public virtual DbSet<PotDemo> PotDemos { get; set; } = null!;
    public virtual DbSet<PotFeature> PotFeatures { get; set; } = null!;
    public virtual DbSet<PotGroup> PotGroups { get; set; } = null!;
    public virtual DbSet<PotMail> PotMails { get; set; } = null!;
    public virtual DbSet<PotRate> PotRates { get; set; } = null!;
    public virtual DbSet<PotService> PotServices { get; set; } = null!;
    public virtual DbSet<PotVisit> PotVisits { get; set; } = null!;
    public virtual DbSet<PotentialCustomer> PotentialCustomers { get; set; } = null!;
    public virtual DbSet<PreGridEquation> PreGridEquations { get; set; } = null!;
    public virtual DbSet<PreNameField> PreNameFields { get; set; } = null!;
    public virtual DbSet<PreNameFieldsList> PreNameFieldsLists { get; set; } = null!;
    public virtual DbSet<PreNameUnite> PreNameUnites { get; set; } = null!;
    public virtual DbSet<Preference> Preferences { get; set; } = null!;
    public virtual DbSet<Prefrence> Prefrences { get; set; } = null!;
    public virtual DbSet<PrefrenceEntry> PrefrenceEntries { get; set; } = null!;
    public virtual DbSet<PriceGroup> PriceGroups { get; set; } = null!;
    public virtual DbSet<PriceName> PriceNames { get; set; } = null!;
    public virtual DbSet<PriceScannerNews> PriceScannerNews { get; set; } = null!;
    public virtual DbSet<PrintCustomertotal> PrintCustomertotals { get; set; } = null!;
    public virtual DbSet<Project> Projects { get; set; } = null!;
    public virtual DbSet<Purchase> Purchases { get; set; } = null!;
    public virtual DbSet<PurchaseConfirm> PurchaseConfirms { get; set; } = null!;
    public virtual DbSet<PurchaseConfirmEntry> PurchaseConfirmEntries { get; set; } = null!;
    public virtual DbSet<PurchaseCycle> PurchaseCycles { get; set; } = null!;
    public virtual DbSet<PurchaseCycleEntry> PurchaseCycleEntries { get; set; } = null!;
    public virtual DbSet<PurchaseEntry> PurchaseEntries { get; set; } = null!;
    public virtual DbSet<PurchaseImport> PurchaseImports { get; set; } = null!;
    public virtual DbSet<PurchaseImportEntry> PurchaseImportEntries { get; set; } = null!;
    public virtual DbSet<PurchaseItemsCycle> PurchaseItemsCycles { get; set; } = null!;
    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; } = null!;
    public virtual DbSet<PurchaseOrderEntry> PurchaseOrderEntries { get; set; } = null!;
    public virtual DbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; } = null!;
    public virtual DbSet<PurchaseOrderQty> PurchaseOrderQties { get; set; } = null!;
    public virtual DbSet<PurchasePayment> PurchasePayments { get; set; } = null!;
    public virtual DbSet<PurchaseQuote> PurchaseQuotes { get; set; } = null!;
    public virtual DbSet<PurchaseQuoteEntry> PurchaseQuoteEntries { get; set; } = null!;
    public virtual DbSet<PurchaseQuoteItem> PurchaseQuoteItems { get; set; } = null!;
    public virtual DbSet<PurchaseQuoteRecieve> PurchaseQuoteRecieves { get; set; } = null!;
    public virtual DbSet<PurchaseQuoteRecieveEntry> PurchaseQuoteRecieveEntries { get; set; } = null!;
    public virtual DbSet<PurchaseQuoteStep> PurchaseQuoteSteps { get; set; } = null!;
    public virtual DbSet<PurchaseService> PurchaseServices { get; set; } = null!;
    public virtual DbSet<PurchaseServiceEntry> PurchaseServiceEntries { get; set; } = null!;
    public virtual DbSet<QuickStart> QuickStarts { get; set; } = null!;
    public virtual DbSet<RFloor> RFloors { get; set; } = null!;
    public virtual DbSet<RKitchen> RKitchens { get; set; } = null!;
    public virtual DbSet<RTable> RTables { get; set; } = null!;
    public virtual DbSet<RePurchase> RePurchases { get; set; } = null!;
    public virtual DbSet<RePurchaseEntry> RePurchaseEntries { get; set; } = null!;
    public virtual DbSet<RePurchasePayment> RePurchasePayments { get; set; } = null!;
    public virtual DbSet<ReSale> ReSales { get; set; } = null!;
    public virtual DbSet<ReSaleEntry> ReSaleEntries { get; set; } = null!;
    public virtual DbSet<ReSalePayment> ReSalePayments { get; set; } = null!;
    public virtual DbSet<RecieveConsignment> RecieveConsignments { get; set; } = null!;
    public virtual DbSet<RecieveConsignmentEntry> RecieveConsignmentEntries { get; set; } = null!;
    public virtual DbSet<RecieveConsignmentQty> RecieveConsignmentQties { get; set; } = null!;
    public virtual DbSet<RefreshToken> RefreshTokens { get; set; } = null!;
    public virtual DbSet<RentAsset> RentAssets { get; set; } = null!;
    public virtual DbSet<RentForm> RentForms { get; set; } = null!;
    public virtual DbSet<RentInstallment> RentInstallments { get; set; } = null!;
    public virtual DbSet<RentOpt> RentOpts { get; set; } = null!;
    public virtual DbSet<RepMan> RepMen { get; set; } = null!;
    public virtual DbSet<RepManEntry> RepManEntries { get; set; } = null!;
    public virtual DbSet<RepPerc> RepPercs { get; set; } = null!;
    public virtual DbSet<RepPercEntry> RepPercEntries { get; set; } = null!;
    public virtual DbSet<RepSlice> RepSlices { get; set; } = null!;
    public virtual DbSet<RepSliceEntry> RepSliceEntries { get; set; } = null!;
    public virtual DbSet<RepVendorPerc> RepVendorPercs { get; set; } = null!;
    public virtual DbSet<RepVendorPercEntry> RepVendorPercEntries { get; set; } = null!;
    public virtual DbSet<Report> Reports { get; set; } = null!;
    public virtual DbSet<ReportCenter> ReportCenters { get; set; } = null!;
    public virtual DbSet<ReportCenterShortcut> ReportCenterShortcuts { get; set; } = null!;
    public virtual DbSet<ReportFile> ReportFiles { get; set; } = null!;
    public virtual DbSet<ReportTableDatum> ReportTableData { get; set; } = null!;
    public virtual DbSet<ReportTemplateTable> ReportTemplateTables { get; set; } = null!;
    public virtual DbSet<ReportsGroup> ReportsGroups { get; set; } = null!;
    public virtual DbSet<ReportsTile> ReportsTiles { get; set; } = null!;
    public virtual DbSet<ResFloor> ResFloors { get; set; } = null!;
    public virtual DbSet<ResTable> ResTables { get; set; } = null!;
    public virtual DbSet<ResTableBooking> ResTableBookings { get; set; } = null!;
    public virtual DbSet<ResTableBookingEntry> ResTableBookingEntries { get; set; } = null!;
    public virtual DbSet<ResTableOrder> ResTableOrders { get; set; } = null!;
    public virtual DbSet<ResTableType> ResTableTypes { get; set; } = null!;
    public virtual DbSet<ResTransactionLog> ResTransactionLogs { get; set; } = null!;
    public virtual DbSet<Resource> Resources { get; set; } = null!;
    public virtual DbSet<RestoreTransaction> RestoreTransactions { get; set; } = null!;
    public virtual DbSet<ReturnConsignment> ReturnConsignments { get; set; } = null!;
    public virtual DbSet<ReturnConsignmentEntry> ReturnConsignmentEntries { get; set; } = null!;
    public virtual DbSet<Role> Roles { get; set; } = null!;
    public virtual DbSet<RpsAccount> RpsAccounts { get; set; } = null!;
    public virtual DbSet<RpsBank> RpsBanks { get; set; } = null!;
    public virtual DbSet<RpsItem> RpsItems { get; set; } = null!;
    public virtual DbSet<RpsItemIndex> RpsItemIndices { get; set; } = null!;
    public virtual DbSet<RpsItemIndexEn> RpsItemIndexEns { get; set; } = null!;
    public virtual DbSet<RpsItemIndexFr> RpsItemIndexFrs { get; set; } = null!;
    public virtual DbSet<RsdBillMapping> RsdBillMappings { get; set; } = null!;
    public virtual DbSet<RsdBillMappingEntry> RsdBillMappingEntries { get; set; } = null!;
    public virtual DbSet<RsdSetting> RsdSettings { get; set; } = null!;
    public virtual DbSet<RsdUser> RsdUsers { get; set; } = null!;
    public virtual DbSet<RspItemAlone> RspItemAlones { get; set; } = null!;
    public virtual DbSet<Rss> Rsses { get; set; } = null!;
    public virtual DbSet<RtlError> RtlErrors { get; set; } = null!;
    public virtual DbSet<RtlTile> RtlTiles { get; set; } = null!;
    public virtual DbSet<SadadService> SadadServices { get; set; } = null!;
    public virtual DbSet<SadadServiceEntry> SadadServiceEntries { get; set; } = null!;
    public virtual DbSet<SalariesCalc> SalariesCalcs { get; set; } = null!;
    public virtual DbSet<SalariesCalcAlert> SalariesCalcAlerts { get; set; } = null!;
    public virtual DbSet<SalariesCalcEntry> SalariesCalcEntries { get; set; } = null!;
    public virtual DbSet<SalariesCalcPaidSolfa> SalariesCalcPaidSolfas { get; set; } = null!;
    public virtual DbSet<SalariesEntry> SalariesEntries { get; set; } = null!;
    public virtual DbSet<SalariesPay> SalariesPays { get; set; } = null!;
    public virtual DbSet<SalariesPayEntry> SalariesPayEntries { get; set; } = null!;
    public virtual DbSet<SalariesRepeatMethod> SalariesRepeatMethods { get; set; } = null!;
    public virtual DbSet<SalariesSlice> SalariesSlices { get; set; } = null!;
    public virtual DbSet<SalariesWork> SalariesWorks { get; set; } = null!;
    public virtual DbSet<SalariesWorkUpgrade> SalariesWorkUpgrades { get; set; } = null!;
    public virtual DbSet<SalaryCalcLog> SalaryCalcLogs { get; set; } = null!;
    public virtual DbSet<SalaryItemDefType> SalaryItemDefTypes { get; set; } = null!;
    public virtual DbSet<SalaryItemType> SalaryItemTypes { get; set; } = null!;
    public virtual DbSet<SalaryLevel> SalaryLevels { get; set; } = null!;
    public virtual DbSet<SalaryPeriod> SalaryPeriods { get; set; } = null!;
    public virtual DbSet<Sale> Sales { get; set; } = null!;
    public virtual DbSet<SaleConfirm> SaleConfirms { get; set; } = null!;
    public virtual DbSet<SaleConfirmEntry> SaleConfirmEntries { get; set; } = null!;
    public virtual DbSet<SaleEntry> SaleEntries { get; set; } = null!;
    public virtual DbSet<SaleEstimate> SaleEstimates { get; set; } = null!;
    public virtual DbSet<SaleEstimateEntry> SaleEstimateEntries { get; set; } = null!;
    public virtual DbSet<SaleOrder> SaleOrders { get; set; } = null!;
    public virtual DbSet<SaleOrderEntry> SaleOrderEntries { get; set; } = null!;
    public virtual DbSet<SaleOrderItem> SaleOrderItems { get; set; } = null!;
    public virtual DbSet<SalePayment> SalePayments { get; set; } = null!;
    public virtual DbSet<SaleQoute> SaleQoutes { get; set; } = null!;
    public virtual DbSet<SaleQouteEntry> SaleQouteEntries { get; set; } = null!;
    public virtual DbSet<SaleTotal> SaleTotals { get; set; } = null!;
    public virtual DbSet<Saletemp> Saletemps { get; set; } = null!;
    public virtual DbSet<Savedoc> Savedocs { get; set; } = null!;
    public virtual DbSet<Serial> Serials { get; set; } = null!;
    public virtual DbSet<ShBalance00> ShBalance00S { get; set; } = null!;
    public virtual DbSet<ShBoxOpening> ShBoxOpenings { get; set; } = null!;
    public virtual DbSet<ShBoxRecieve> ShBoxRecieves { get; set; } = null!;
    public virtual DbSet<ShBoxSetting> ShBoxSettings { get; set; } = null!;
    public virtual DbSet<ShBoxTransfer> ShBoxTransfers { get; set; } = null!;
    public virtual DbSet<ShBranchDailyAction> ShBranchDailyActions { get; set; } = null!;
    public virtual DbSet<ShDailyBox> ShDailyBoxes { get; set; } = null!;
    public virtual DbSet<ShDailyMsg> ShDailyMsgs { get; set; } = null!;
    public virtual DbSet<ShMsgBalance> ShMsgBalances { get; set; } = null!;
    public virtual DbSet<ShMsgOpen> ShMsgOpens { get; set; } = null!;
    public virtual DbSet<ShMsgSale> ShMsgSales { get; set; } = null!;
    public virtual DbSet<ShMsgSaleAlarm> ShMsgSaleAlarms { get; set; } = null!;
    public virtual DbSet<ShMsgSetting> ShMsgSettings { get; set; } = null!;
    public virtual DbSet<ShMsgSpent> ShMsgSpents { get; set; } = null!;
    public virtual DbSet<ShPurchase> ShPurchases { get; set; } = null!;
    public virtual DbSet<ShRent> ShRents { get; set; } = null!;
    public virtual DbSet<ShSale> ShSales { get; set; } = null!;
    public virtual DbSet<ShippingCar> ShippingCars { get; set; } = null!;
    public virtual DbSet<ShippingCarUsage> ShippingCarUsages { get; set; } = null!;
    public virtual DbSet<ShippingDriver> ShippingDrivers { get; set; } = null!;
    public virtual DbSet<ShippingFuel> ShippingFuels { get; set; } = null!;
    public virtual DbSet<ShortCut> ShortCuts { get; set; } = null!;
    public virtual DbSet<Slice> Slices { get; set; } = null!;
    public virtual DbSet<SliceDefault> SliceDefaults { get; set; } = null!;
    public virtual DbSet<SliceKindfactor> SliceKindfactors { get; set; } = null!;
    public virtual DbSet<SliceRepresent> SliceRepresents { get; set; } = null!;
    public virtual DbSet<SliceWorkDay> SliceWorkDays { get; set; } = null!;
    public virtual DbSet<Sm> Sms { get; set; } = null!;
    public virtual DbSet<SmsSetting> SmsSettings { get; set; } = null!;
    public virtual DbSet<Smsalert> Smsalerts { get; set; } = null!;
    public virtual DbSet<SmsalertEntry> SmsalertEntries { get; set; } = null!;
    public virtual DbSet<SmscustGroup> SmscustGroups { get; set; } = null!;
    public virtual DbSet<SmscustGroupEntry> SmscustGroupEntries { get; set; } = null!;
    public virtual DbSet<Smserror> Smserrors { get; set; } = null!;
    public virtual DbSet<Smsnotification> Smsnotifications { get; set; } = null!;
    public virtual DbSet<Smspatrol> Smspatrols { get; set; } = null!;
    public virtual DbSet<Smssending> Smssendings { get; set; } = null!;
    public virtual DbSet<SmssendingEntry> SmssendingEntries { get; set; } = null!;
    public virtual DbSet<Smstemplate> Smstemplates { get; set; } = null!;
    public virtual DbSet<Smsvariable> Smsvariables { get; set; } = null!;
    public virtual DbSet<SrvcClass> SrvcClasses { get; set; } = null!;
    public virtual DbSet<SrvcItem> SrvcItems { get; set; } = null!;
    public virtual DbSet<SrvcRecieve> SrvcRecieves { get; set; } = null!;
    public virtual DbSet<SrvcStore> SrvcStores { get; set; } = null!;
    public virtual DbSet<Storage> Storages { get; set; } = null!;
    public virtual DbSet<StorageSendMoney> StorageSendMoneys { get; set; } = null!;
    public virtual DbSet<StorageTransform> StorageTransforms { get; set; } = null!;
    public virtual DbSet<StoreAdjustment> StoreAdjustments { get; set; } = null!;
    public virtual DbSet<StoreAdjustmentEntry> StoreAdjustmentEntries { get; set; } = null!;
    public virtual DbSet<StoreAssembly> StoreAssemblies { get; set; } = null!;
    public virtual DbSet<StoreAssemblyEntry> StoreAssemblyEntries { get; set; } = null!;
    public virtual DbSet<StoreCharity> StoreCharities { get; set; } = null!;
    public virtual DbSet<StoreCharityEntry> StoreCharityEntries { get; set; } = null!;
    public virtual DbSet<StoreConvert> StoreConverts { get; set; } = null!;
    public virtual DbSet<StoreConvertEntry> StoreConvertEntries { get; set; } = null!;
    public virtual DbSet<StoreDisAssembly> StoreDisAssemblies { get; set; } = null!;
    public virtual DbSet<StoreDisAssemblyEntry> StoreDisAssemblyEntries { get; set; } = null!;
    public virtual DbSet<StoreHalek> StoreHaleks { get; set; } = null!;
    public virtual DbSet<StoreHalekEntry> StoreHalekEntries { get; set; } = null!;
    public virtual DbSet<StoreIn> StoreIns { get; set; } = null!;
    public virtual DbSet<StoreInEntry> StoreInEntries { get; set; } = null!;
    public virtual DbSet<StoreInTransfer> StoreInTransfers { get; set; } = null!;
    public virtual DbSet<StoreInTransferEntry> StoreInTransferEntries { get; set; } = null!;
    public virtual DbSet<StoreIssue> StoreIssues { get; set; } = null!;
    public virtual DbSet<StoreIssueEntry> StoreIssueEntries { get; set; } = null!;
    public virtual DbSet<StoreItemId> StoreItemIds { get; set; } = null!;
    public virtual DbSet<StoreItemIdStyle> StoreItemIdStyles { get; set; } = null!;
    public virtual DbSet<StoreOpening> StoreOpenings { get; set; } = null!;
    public virtual DbSet<StoreOpeningEntry> StoreOpeningEntries { get; set; } = null!;
    public virtual DbSet<StoreOut> StoreOuts { get; set; } = null!;
    public virtual DbSet<StoreOutEntry> StoreOutEntries { get; set; } = null!;
    public virtual DbSet<StoreOutTransfer> StoreOutTransfers { get; set; } = null!;
    public virtual DbSet<StoreOutTransferEntry> StoreOutTransferEntries { get; set; } = null!;
    public virtual DbSet<StorePacking> StorePackings { get; set; } = null!;
    public virtual DbSet<StorePackingCancel> StorePackingCancels { get; set; } = null!;
    public virtual DbSet<StorePackingCancelEntry> StorePackingCancelEntries { get; set; } = null!;
    public virtual DbSet<StorePackingEntry> StorePackingEntries { get; set; } = null!;
    public virtual DbSet<StorePackingOrder> StorePackingOrders { get; set; } = null!;
    public virtual DbSet<StorePackingOrderEntry> StorePackingOrderEntries { get; set; } = null!;
    public virtual DbSet<StoreRecieve> StoreRecieves { get; set; } = null!;
    public virtual DbSet<StoreRecieveEntry> StoreRecieveEntries { get; set; } = null!;
    public virtual DbSet<StoreSendOrder> StoreSendOrders { get; set; } = null!;
    public virtual DbSet<StoreSendOrderEntry> StoreSendOrderEntries { get; set; } = null!;
    public virtual DbSet<StoreTransactionType> StoreTransactionTypes { get; set; } = null!;
    public virtual DbSet<StoreTransferOrder> StoreTransferOrders { get; set; } = null!;
    public virtual DbSet<StoreTransferOrderEntry> StoreTransferOrderEntries { get; set; } = null!;
    public virtual DbSet<SupportCommunication> SupportCommunications { get; set; } = null!;
    public virtual DbSet<SupportExtraField> SupportExtraFields { get; set; } = null!;
    public virtual DbSet<SupportLevel> SupportLevels { get; set; } = null!;
    public virtual DbSet<SupportNote> SupportNotes { get; set; } = null!;
    public virtual DbSet<SupportPermission> SupportPermissions { get; set; } = null!;
    public virtual DbSet<SupportPriority> SupportPriorities { get; set; } = null!;
    public virtual DbSet<SupportProduct> SupportProducts { get; set; } = null!;
    public virtual DbSet<SupportStatus> SupportStatuses { get; set; } = null!;
    public virtual DbSet<SupportTicket> SupportTickets { get; set; } = null!;
    public virtual DbSet<SupportType> SupportTypes { get; set; } = null!;
    public virtual DbSet<Sync> Syncs { get; set; } = null!;
    public virtual DbSet<Table> Tables { get; set; } = null!;
    public virtual DbSet<TahselBill> TahselBills { get; set; } = null!;
    public virtual DbSet<TahselMotalba> TahselMotalbas { get; set; } = null!;
    public virtual DbSet<TaskHistory> TaskHistories { get; set; } = null!;
    public virtual DbSet<TaskIdMapping> TaskIdMappings { get; set; } = null!;
    public virtual DbSet<TaskMapAppointment> TaskMapAppointments { get; set; } = null!;
    public virtual DbSet<TaskMapDependency> TaskMapDependencies { get; set; } = null!;
    public virtual DbSet<TaskMapResource> TaskMapResources { get; set; } = null!;
    public virtual DbSet<TaxEgyptHome> TaxEgyptHomes { get; set; } = null!;
    public virtual DbSet<TaxEgyptSetting> TaxEgyptSettings { get; set; } = null!;
    public virtual DbSet<TaxValidation> TaxValidations { get; set; } = null!;
    public virtual DbSet<TaxValidationResult> TaxValidationResults { get; set; } = null!;
    public virtual DbSet<TaxValidationResultError> TaxValidationResultErrors { get; set; } = null!;
    public virtual DbSet<TaxesAdjust> TaxesAdjusts { get; set; } = null!;
    public virtual DbSet<TaxesDat> TaxesDats { get; set; } = null!;
    public virtual DbSet<TaxesGroup> TaxesGroups { get; set; } = null!;
    public virtual DbSet<TaxesPay> TaxesPays { get; set; } = null!;
    public virtual DbSet<TaxesSubGroup> TaxesSubGroups { get; set; } = null!;
    public virtual DbSet<Taxes> Taxes { get; set; } = null!;
    public virtual DbSet<Technician> Technicians { get; set; } = null!;
    public virtual DbSet<TechniciansEntry> TechniciansEntries { get; set; } = null!;
    public virtual DbSet<TeleSalesRevision> TeleSalesRevisions { get; set; } = null!;
    public virtual DbSet<TempAccountcompaire> TempAccountcompaires { get; set; } = null!;
    public virtual DbSet<TempConvert> TempConverts { get; set; } = null!;
    public virtual DbSet<TempError01> TempError01S { get; set; } = null!;
    public virtual DbSet<TempFinalDatum> TempFinalData { get; set; } = null!;
    public virtual DbSet<TempInhanddataAvg> TempInhanddataAvgs { get; set; } = null!;
    public virtual DbSet<TempInvoiceTableEntry> TempInvoiceTableEntries { get; set; } = null!;
    public virtual DbSet<TempProcessdatum> TempProcessdata { get; set; } = null!;
    public virtual DbSet<TempPurchase> TempPurchases { get; set; } = null!;
    public virtual DbSet<TempPurchaseAvg> TempPurchaseAvgs { get; set; } = null!;
    public virtual DbSet<TempPurchaseIdusedForAvg> TempPurchaseIdusedForAvgs { get; set; } = null!;
    public virtual DbSet<TempSell> TempSells { get; set; } = null!;
    public virtual DbSet<TempSellAvg> TempSellAvgs { get; set; } = null!;
    public virtual DbSet<Tempitemprofit> Tempitemprofits { get; set; } = null!;
    public virtual DbSet<Tempitemprofit1> Tempitemprofit1S { get; set; } = null!;
    public virtual DbSet<Tip> Tips { get; set; } = null!;
    public virtual DbSet<TmpStoreTable> TmpStoreTables { get; set; } = null!;
    public virtual DbSet<TodayDate> TodayDates { get; set; } = null!;
    public virtual DbSet<TransCome> TransComes { get; set; } = null!;
    public virtual DbSet<TransGo> TransGos { get; set; } = null!;
    public virtual DbSet<TransStock> TransStocks { get; set; } = null!;
    public virtual DbSet<Translate> Translates { get; set; } = null!;
    public virtual DbSet<TripAirLine> TripAirLines { get; set; } = null!;
    public virtual DbSet<TripAirLineCommission> TripAirLineCommissions { get; set; } = null!;
    public virtual DbSet<TripAirport> TripAirports { get; set; } = null!;
    public virtual DbSet<TripCommission> TripCommissions { get; set; } = null!;
    public virtual DbSet<TripCommissionEntry> TripCommissionEntries { get; set; } = null!;
    public virtual DbSet<TripContract> TripContracts { get; set; } = null!;
    public virtual DbSet<TripDateRange> TripDateRanges { get; set; } = null!;
    public virtual DbSet<TripDemanding> TripDemandings { get; set; } = null!;
    public virtual DbSet<TripDemanding1> TripDemandings1 { get; set; } = null!;
    public virtual DbSet<TripDirectionType> TripDirectionTypes { get; set; } = null!;
    public virtual DbSet<TripExcelSetting> TripExcelSettings { get; set; } = null!;
    public virtual DbSet<TripGd> TripGds { get; set; } = null!;
    public virtual DbSet<TripHome> TripHomes { get; set; } = null!;
    public virtual DbSet<TripIatum> TripIata { get; set; } = null!;
    public virtual DbSet<TripItineraryType> TripItineraryTypes { get; set; } = null!;
    public virtual DbSet<TripRequireField> TripRequireFields { get; set; } = null!;
    public virtual DbSet<TripStatus> TripStatuses { get; set; } = null!;
    public virtual DbSet<TripTicket> TripTickets { get; set; } = null!;
    public virtual DbSet<TripTicketTemp> TripTicketTemps { get; set; } = null!;
    public virtual DbSet<TripUser> TripUsers { get; set; } = null!;
    public virtual DbSet<Tt> Tts { get; set; } = null!;
    public virtual DbSet<Unit> Units { get; set; } = null!;
    public virtual DbSet<UniteCode> UniteCodes { get; set; } = null!;
    public virtual DbSet<UnitsEntry> UnitsEntries { get; set; } = null!;
    public virtual DbSet<UpdateReSaleTran> UpdateReSaleTrans { get; set; } = null!;
    public virtual DbSet<User> Users { get; set; } = null!;
    public virtual DbSet<UserAnyDeskSetting> UserAnyDeskSettings { get; set; } = null!;
    public virtual DbSet<UserAttention> UserAttentions { get; set; } = null!;
    public virtual DbSet<UserBranch> UserBranches { get; set; } = null!;
    public virtual DbSet<UserDefaultAccount> UserDefaultAccounts { get; set; } = null!;
    public virtual DbSet<UserDefaultInvoice> UserDefaultInvoices { get; set; } = null!;
    public virtual DbSet<UserDepartment> UserDepartments { get; set; } = null!;
    public virtual DbSet<UserJob> UserJobs { get; set; } = null!;
    public virtual DbSet<UserNotification> UserNotifications { get; set; } = null!;
    public virtual DbSet<UserNotificationEntry> UserNotificationEntries { get; set; } = null!;
    public virtual DbSet<UserOpenDay> UserOpenDays { get; set; } = null!;
    public virtual DbSet<UserOpenDayEntry> UserOpenDayEntries { get; set; } = null!;
    public virtual DbSet<UserOption> UserOptions { get; set; } = null!;
    public virtual DbSet<UserPaymentMethod> UserPaymentMethods { get; set; } = null!;
    public virtual DbSet<UserPermission> UserPermissions { get; set; } = null!;
    public virtual DbSet<UserProperty> UserProperties { get; set; } = null!;
    public virtual DbSet<UserSetting> UserSettings { get; set; } = null!;
    public virtual DbSet<UserStore> UserStores { get; set; } = null!;
    public virtual DbSet<UsersLog> UsersLogs { get; set; } = null!;
    public virtual DbSet<UsersLogEntry> UsersLogEntries { get; set; } = null!;
    public virtual DbSet<UsersPrivilege> UsersPrivileges { get; set; } = null!;
    public virtual DbSet<UsersPrivilegesEntry> UsersPrivilegesEntries { get; set; } = null!;
    public virtual DbSet<UsersResource> UsersResources { get; set; } = null!;
    public virtual DbSet<Visa> Visas { get; set; } = null!;
    public virtual DbSet<WJob> WJobs { get; set; } = null!;
    public virtual DbSet<WTempattendance> WTempattendances { get; set; } = null!;
    public virtual DbSet<WooCategoryMapper> WooCategoryMappers { get; set; } = null!;
    public virtual DbSet<WooCustomerMapper> WooCustomerMappers { get; set; } = null!;
    public virtual DbSet<WooKindMapper> WooKindMappers { get; set; } = null!;
    public virtual DbSet<WooOrder> WooOrders { get; set; } = null!;
    public virtual DbSet<WooOrderBilling> WooOrderBillings { get; set; } = null!;
    public virtual DbSet<WooOrderCouponLine> WooOrderCouponLines { get; set; } = null!;
    public virtual DbSet<WooOrderCouponLineMetum> WooOrderCouponLineMeta { get; set; } = null!;
    public virtual DbSet<WooOrderFeeLine> WooOrderFeeLines { get; set; } = null!;
    public virtual DbSet<WooOrderLineItem> WooOrderLineItems { get; set; } = null!;
    public virtual DbSet<WooOrderMapper> WooOrderMappers { get; set; } = null!;
    public virtual DbSet<WooOrderMetum> WooOrderMeta { get; set; } = null!;
    public virtual DbSet<WooOrderRefundLine> WooOrderRefundLines { get; set; } = null!;
    public virtual DbSet<WooOrderShipping> WooOrderShippings { get; set; } = null!;
    public virtual DbSet<WooOrderShippingLine> WooOrderShippingLines { get; set; } = null!;
    public virtual DbSet<WooOrderTaxLine> WooOrderTaxLines { get; set; } = null!;
    public virtual DbSet<WooSetting> WooSettings { get; set; } = null!;
    public virtual DbSet<WooTaxItem> WooTaxItems { get; set; } = null!;
    public virtual DbSet<Work> Works { get; set; } = null!;
    public virtual DbSet<WorkAbsent> WorkAbsents { get; set; } = null!;
    public virtual DbSet<WorkAbsentBalance> WorkAbsentBalances { get; set; } = null!;
    public virtual DbSet<WorkAbsentCause> WorkAbsentCauses { get; set; } = null!;
    public virtual DbSet<WorkAlarm> WorkAlarms { get; set; } = null!;
    public virtual DbSet<WorkAttend> WorkAttends { get; set; } = null!;
    public virtual DbSet<WorkAttendance> WorkAttendances { get; set; } = null!;
    public virtual DbSet<WorkAttendanceInOut> WorkAttendanceInOuts { get; set; } = null!;
    public virtual DbSet<WorkBonu> WorkBonus { get; set; } = null!;
    public virtual DbSet<WorkDealing> WorkDealings { get; set; } = null!;
    public virtual DbSet<WorkDiscount> WorkDiscounts { get; set; } = null!;
    public virtual DbSet<WorkDiscountItem> WorkDiscountItems { get; set; } = null!;
    public virtual DbSet<WorkEservicePay> WorkEservicePays { get; set; } = null!;
    public virtual DbSet<WorkEserviceReceive> WorkEserviceReceives { get; set; } = null!;
    public virtual DbSet<WorkEvaluation> WorkEvaluations { get; set; } = null!;
    public virtual DbSet<WorkEvaluationItem> WorkEvaluationItems { get; set; } = null!;
    public virtual DbSet<WorkEvaluationRate> WorkEvaluationRates { get; set; } = null!;
    public virtual DbSet<WorkExtraItem> WorkExtraItems { get; set; } = null!;
    public virtual DbSet<WorkExtraday> WorkExtradays { get; set; } = null!;
    public virtual DbSet<WorkExtrahour> WorkExtrahours { get; set; } = null!;
    public virtual DbSet<WorkFactore> WorkFactores { get; set; } = null!;
    public virtual DbSet<WorkFactoreEntry> WorkFactoreEntries { get; set; } = null!;
    public virtual DbSet<WorkFile> WorkFiles { get; set; } = null!;
    public virtual DbSet<WorkFingerLog> WorkFingerLogs { get; set; } = null!;
    public virtual DbSet<WorkGroup> WorkGroups { get; set; } = null!;
    public virtual DbSet<WorkIncentive> WorkIncentives { get; set; } = null!;
    public virtual DbSet<WorkIncentiveItem> WorkIncentiveItems { get; set; } = null!;
    public virtual DbSet<WorkInoutTemp> WorkInoutTemps { get; set; } = null!;
    public virtual DbSet<WorkInstallment> WorkInstallments { get; set; } = null!;
    public virtual DbSet<WorkInstallmentsEntry> WorkInstallmentsEntries { get; set; } = null!;
    public virtual DbSet<WorkInstallmentsItemEntry> WorkInstallmentsItemEntries { get; set; } = null!;
    public virtual DbSet<WorkInsurance> WorkInsurances { get; set; } = null!;
    public virtual DbSet<WorkInsuranceEntry> WorkInsuranceEntries { get; set; } = null!;
    public virtual DbSet<WorkItinerary> WorkItineraries { get; set; } = null!;
    public virtual DbSet<WorkItineraryEntry> WorkItineraryEntries { get; set; } = null!;
    public virtual DbSet<WorkLeave> WorkLeaves { get; set; } = null!;
    public virtual DbSet<WorkMonthly> WorkMonthlies { get; set; } = null!;
    public virtual DbSet<WorkMove> WorkMoves { get; set; } = null!;
    public virtual DbSet<WorkPaidSalary> WorkPaidSalaries { get; set; } = null!;
    public virtual DbSet<WorkPayInsurance> WorkPayInsurances { get; set; } = null!;
    public virtual DbSet<WorkPayRollItem> WorkPayRollItems { get; set; } = null!;
    public virtual DbSet<WorkPayTax> WorkPayTaxes { get; set; } = null!;
    public virtual DbSet<WorkPercent> WorkPercents { get; set; } = null!;
    public virtual DbSet<WorkPeriod> WorkPeriods { get; set; } = null!;
    public virtual DbSet<WorkPeriodChange> WorkPeriodChanges { get; set; } = null!;
    public virtual DbSet<WorkPeriodEntry> WorkPeriodEntries { get; set; } = null!;
    public virtual DbSet<WorkPermission> WorkPermissions { get; set; } = null!;
    public virtual DbSet<WorkPink> WorkPinks { get; set; } = null!;
    public virtual DbSet<WorkPledge> WorkPledges { get; set; } = null!;
    public virtual DbSet<WorkPledgeAdjust> WorkPledgeAdjusts { get; set; } = null!;
    public virtual DbSet<WorkPledgePay> WorkPledgePays { get; set; } = null!;
    public virtual DbSet<WorkPledgeReceive> WorkPledgeReceives { get; set; } = null!;
    public virtual DbSet<WorkPledgeType> WorkPledgeTypes { get; set; } = null!;
    public virtual DbSet<WorkRefusal> WorkRefusals { get; set; } = null!;
    public virtual DbSet<WorkSalaryPerc> WorkSalaryPercs { get; set; } = null!;
    public virtual DbSet<WorkSalaryStop> WorkSalaryStops { get; set; } = null!;
    public virtual DbSet<WorkSolfa> WorkSolfas { get; set; } = null!;
    public virtual DbSet<WorkSolfarecieve> WorkSolfarecieves { get; set; } = null!;
    public virtual DbSet<WorkTask> WorkTasks { get; set; } = null!;
    public virtual DbSet<WorkTaskDaily> WorkTaskDailies { get; set; } = null!;
    public virtual DbSet<WorkTimeSheet> WorkTimeSheets { get; set; } = null!;
    public virtual DbSet<WorkTraingItem> WorkTraingItems { get; set; } = null!;
    public virtual DbSet<WorkTransaction> WorkTransactions { get; set; } = null!;
    public virtual DbSet<WorkTransactionEntry> WorkTransactionEntries { get; set; } = null!;
    public virtual DbSet<WorkUpgrade> WorkUpgrades { get; set; } = null!;
    public virtual DbSet<WorkUpgradeHistory> WorkUpgradeHistories { get; set; } = null!;
    public virtual DbSet<WorkUsedEservice> WorkUsedEservices { get; set; } = null!;
    public virtual DbSet<WorkVacation> WorkVacations { get; set; } = null!;
    public virtual DbSet<WorkVacationOrder> WorkVacationOrders { get; set; } = null!;
    public virtual DbSet<WorkVoc> WorkVocs { get; set; } = null!;
    public virtual DbSet<WorkWorkDay> WorkWorkDays { get; set; } = null!;
    public virtual DbSet<WorksPhoto> WorksPhotos { get; set; } = null!;
    public virtual DbSet<YearFinancial> YearFinancials { get; set; } = null!;
    public virtual DbSet<YearFinancialMaster> YearFinancialMasters { get; set; } = null!;
    public virtual DbSet<YearFinancialRole> YearFinancialRoles { get; set; } = null!;

    #endregion
}